{"ast":null,"code":"import { of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.products = new Array();\n    // for (let index = 0; index < 101; index++) {\n    //   this.products.push({\n    //     id: UUID.UUID(),\n    //     name: `Product ${Number(index) + 1}`,\n    //     price: Math.round(Math.random() * 100) * 1000,\n    //     promotion: Math.random() > 0.4,\n    //   });\n    // }\n  }\n\n  ngOnInit() {\n    this.getAllProducts().subscribe({\n      next: ({\n        _embedded,\n        page\n      }) => {\n        _embedded.products.forEach(p => {\n          console.log(p);\n          this.products.push(p);\n        });\n        console.log(this.products);\n        //this.products = _embedded.products;\n        console.log(_embedded.products, page);\n      },\n      error: err => console.table(err)\n    });\n  }\n  getAllProducts() {\n    return this.httpClient.get(\"http://localhost:8888/INVENTORY-SERVICE/products\");\n    /*.subscribe({\n          next: ({ _embedded, page }: any) => {\n            _embedded.products.forEach((p: any) => {\n              console.log(p);\n              this.products.push(p);\n            });\n            console.log(this.products);\n            //this.products = _embedded.products;\n            console.log(_embedded.products, page);\n          },\n          error: (err) => console.table(err),\n        })\n    );\n    return of(this.products);*/\n  }\n\n  getPageProduct(page, size) {\n    let index = page * size;\n    let totalPages = ~~(this.products.length / size) + (this.products.length % size > 0 ? 1 : 0);\n    let prods = this.products.slice(index, index + size);\n    console.log({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  deleteProduct(productID) {\n    this.products = this.products.filter(p => p.id != productID);\n    return of(true);\n  }\n  setProductPromotion(productID) {\n    let product = this.products.find(p => p.id == productID);\n    if (product) {\n      product.promotion = !product.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error(\"Product not found\"));\n  }\n  getProductsByKeyword(keyword) {\n    let prods = this.products.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.products);\n    return of(prods);\n  }\n  getPageProductsByKeyword(keyword, page, size) {\n    let prods = this.products.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.products);\n    return this.pageOf(prods, page, size);\n  }\n  pageOf(products, page, size) {\n    let index = page * size;\n    let totalPages = ~~(products.length / size) + (products.length % size > 0 ? 1 : 0);\n    let prods = products.slice(index, index + size);\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  addProduct(name, price, promotion) {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion\n    });\n    return this.getProductById(uuid);\n  }\n  editProduct(id, name, price, promotion) {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map(p => p.id == id ? {\n      id: id,\n      name: name,\n      price: price,\n      promotion: promotion\n    } : p);\n    return this.getProductById(id);\n  }\n  getProductById(id) {\n    const product = this.products.find(p => p.id == id);\n    if (product == undefined) return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"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","names":["of","throwError","UUID","ProductService","constructor","httpClient","products","Array","ngOnInit","getAllProducts","subscribe","next","_embedded","page","forEach","p","console","log","push","error","err","table","get","getPageProduct","size","index","totalPages","length","prods","slice","deleteProduct","productID","filter","id","setProductPromotion","product","find","promotion","Error","getProductsByKeyword","keyword","name","toLowerCase","trim","includes","getPageProductsByKeyword","pageOf","addProduct","price","uuid","getProductById","editProduct","map","undefined","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/product.service.ts"],"sourcesContent":["import { Product, PageProduct } from \"./../model/product.model\";\nimport { Injectable, OnInit } from \"@angular/core\";\nimport { Observable, of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService implements OnInit {\n  private products!: Array<any>;\n  constructor(private httpClient: HttpClient) {\n    this.products = new Array<Product>();\n\n    // for (let index = 0; index < 101; index++) {\n    //   this.products.push({\n    //     id: UUID.UUID(),\n    //     name: `Product ${Number(index) + 1}`,\n    //     price: Math.round(Math.random() * 100) * 1000,\n    //     promotion: Math.random() > 0.4,\n    //   });\n    // }\n  }\n  ngOnInit(): void {\n    this.getAllProducts().subscribe(\n      {\n          next: ({ _embedded, page }: any) => {\n            _embedded.products.forEach((p: any) => {\n              console.log(p);\n              this.products.push(p);\n            });\n            console.log(this.products);\n            //this.products = _embedded.products;\n            console.log(_embedded.products, page);\n          },\n          error: (err) => console.table(err),\n        })\n    )\n  }\n  public getAllProducts(): Observable<Array<any>> {\n    return this.httpClient.get<Array<any>>(\n      \"http://localhost:8888/INVENTORY-SERVICE/products\"\n    );\n    /*.subscribe({\n          next: ({ _embedded, page }: any) => {\n            _embedded.products.forEach((p: any) => {\n              console.log(p);\n              this.products.push(p);\n            });\n            console.log(this.products);\n            //this.products = _embedded.products;\n            console.log(_embedded.products, page);\n          },\n          error: (err) => console.table(err),\n        })\n    );\n    return of(this.products);*/\n  }\n  public getPageProduct(page: number, size: number): Observable<PageProduct> {\n    let index = page * size;\n    let totalPages =\n      ~~(this.products.length / size) +\n      (this.products.length % size > 0 ? 1 : 0);\n    let prods = this.products.slice(index, index + size);\n    console.log({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public deleteProduct(productID: string): Observable<boolean> {\n    this.products = this.products.filter((p) => p.id != productID);\n    return of(true);\n  }\n\n  public setProductPromotion(productID: string): Observable<boolean> {\n    let product = this.products.find((p) => p.id == productID);\n    if (product) {\n      product.promotion = !product.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error(\"Product not found\"));\n  }\n  public getProductsByKeyword(keyword: string): Observable<Product[]> {\n    let prods = this.products.filter((p: Product) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.products\n    );\n    return of(prods);\n  }\n  public getPageProductsByKeyword(\n    keyword: string,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    let prods = this.products.filter((p: Product) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.products\n    );\n    return this.pageOf(prods, page, size);\n  }\n  public pageOf(\n    products: Array<Product>,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    let index = page * size;\n    let totalPages =\n      ~~(products.length / size) + (products.length % size > 0 ? 1 : 0);\n    let prods = products.slice(index, index + size);\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public addProduct(\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion,\n    });\n    return this.getProductById(uuid);\n  }\n  public editProduct(\n    id: string,\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map((p) =>\n      p.id == id\n        ? { id: id, name: name, price: price, promotion: promotion }\n        : p\n    );\n    return this.getProductById(id);\n  }\n  public getProductById(id: string): Observable<Product> {\n    const product = this.products.find((p) => p.id == id);\n    if (product == undefined)\n      return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}