{"ast":null,"code":"import { KeycloakEventType } from \"keycloak-angular\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nexport class SecurityService {\n  constructor(kcService) {\n    this.kcService = kcService;\n    this.getToken = () => {\n      return \"\";\n    };\n    this.init();\n  }\n  init() {\n    this.kcService.keycloakEvents$.subscribe({\n      next: e => {\n        if (e.type == KeycloakEventType.OnAuthSuccess) {\n          this.kcService.loadUserProfile().then(profile => {\n            this.profile = profile;\n            console.log(profile);\n          });\n        }\n      },\n      error: error => {}\n    });\n  }\n  hasRoleIn(roles) {\n    let userRoles = this.kcService.getUserRoles();\n    console.log(roles);\n    console.log(\"************\");\n    console.log(userRoles);\n    for (let role of roles) {\n      console.log(userRoles.includes(role));\n      if (userRoles.includes(role)) return true;\n    }\n    return false;\n  }\n  login() {\n    this.kcService.login({\n      redirectUri: window.location.origin\n    });\n  }\n  logout() {\n    this.kcService.logout(window.location.origin);\n  }\n  static #_ = this.ɵfac = function SecurityService_Factory(t) {\n    return new (t || SecurityService)(i0.ɵɵinject(i1.KeycloakService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecurityService,\n    factory: SecurityService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAyB,kBAAkB;;;AAOrE,OAAM,MAAOC,eAAe;EAG1BC,YAAmBC,SAA0B;IAA1B,cAAS,GAATA,SAAS;IAqCrB,aAAQ,GAAG,MAAK;MACrB,OAAO,EAAE;IACX,CAAC;IAtCC,IAAI,CAACC,IAAI,EAAE;EACb;EACAA,IAAI;IACF,IAAI,CAACD,SAAS,CAACE,eAAe,CAACC,SAAS,CAAC;MACvCC,IAAI,EAAGC,CAAC,IAAI;QACV,IAAIA,CAAC,CAACC,IAAI,IAAIT,iBAAiB,CAACU,aAAa,EAAE;UAC7C,IAAI,CAACP,SAAS,CAACQ,eAAe,EAAE,CAACC,IAAI,CAAEC,OAAO,IAAI;YAChD,IAAI,CAACA,OAAO,GAAGA,OAAO;YACtBC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;UACtB,CAAC,CAAC;;MAEN,CAAC;MACDG,KAAK,EAAGA,KAAK,IAAI,CAAE;KACpB,CAAC;EACJ;EACAC,SAAS,CAACC,KAAS;IACjB,IAAIC,SAAS,GAAG,IAAI,CAAChB,SAAS,CAACiB,YAAY,EAAE;IAC7CN,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IAClBJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACI,SAAS,CAAC;IAEtB,KAAK,IAAIE,IAAI,IAAIH,KAAK,EAAE;MACtBJ,OAAO,CAACC,GAAG,CAACI,SAAS,CAACG,QAAQ,CAACD,IAAI,CAAC,CAAC;MACrC,IAAIF,SAAS,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAE,OAAO,IAAI;;IAE3C,OAAO,KAAK;EACd;EAEAE,KAAK;IACH,IAAI,CAACpB,SAAS,CAACoB,KAAK,CAAC;MACnBC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC;KAC9B,CAAC;EACJ;EACAC,MAAM;IACJ,IAAI,CAACzB,SAAS,CAACyB,MAAM,CAACH,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;EAC/C;EAAC;qBAvCU1B,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAA4B,SAAf5B,eAAe;IAAA6B,YAFd;EAAM","names":["KeycloakEventType","SecurityService","constructor","kcService","init","keycloakEvents$","subscribe","next","e","type","OnAuthSuccess","loadUserProfile","then","profile","console","log","error","hasRoleIn","roles","userRoles","getUserRoles","role","includes","login","redirectUri","window","location","origin","logout","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/security.service.ts"],"sourcesContent":["import { KeycloakEventType, KeycloakService } from \"keycloak-angular\";\nimport { Injectable } from \"@angular/core\";\nimport { KeycloakProfile } from \"keycloak-js\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecurityService {\n  public profile?: KeycloakProfile;\n\n  constructor(public kcService: KeycloakService) {\n    this.init();\n  }\n  init() {\n    this.kcService.keycloakEvents$.subscribe({\n      next: (e) => {\n        if (e.type == KeycloakEventType.OnAuthSuccess) {\n          this.kcService.loadUserProfile().then((profile) => {\n            this.profile = profile;\n            console.log(profile);\n          });\n        }\n      },\n      error: (error) => {},\n    });\n  }\n  hasRoleIn(roles: []): boolean {\n    let userRoles = this.kcService.getUserRoles();\n    console.log(roles);\n    console.log(\"************\");\n    console.log(userRoles);\n\n    for (let role of roles) {\n      console.log(userRoles.includes(role));\n      if (userRoles.includes(role)) return true;\n    }\n    return false;\n  }\n\n  login() {\n    this.kcService.login({\n      redirectUri: window.location.origin,\n    });\n  }\n  logout() {\n    this.kcService.logout(window.location.origin);\n  }\n  public getToken = () => {\n    return \"\";\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}