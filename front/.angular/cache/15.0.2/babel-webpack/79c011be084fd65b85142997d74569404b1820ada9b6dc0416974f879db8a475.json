{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.BaseURI = \"http://localhost:8888/INVENTORY-SERVICE/products\";\n  }\n  ngOnInit() {}\n  deleteProduct(productID) {\n    this.products = this.products.filter(p => p.id != productID);\n    return of(true);\n  }\n  getPageProductsByKeyword(keyword, page, size) {\n    return this.httpClient.get(`${this.BaseURI}?keyword=${keyword}&page=${page}&size=${size}`);\n  }\n  addProduct(name, price, quantity) {\n    return this.httpClient.post(`${this.BaseURI}`, {\n      name: name,\n      price: price,\n      quantity: quantity\n    });\n  }\n  editProduct(id, name, price, quantity) {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map(p => p.id == id ? {\n      id: id,\n      name: name,\n      price: price,\n      quantity: quantity\n    } : p);\n    return this.getProductById(id);\n  }\n  getProductById(id) {\n    return this.httpClient.get(`${this.BaseURI}/${id}`);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAoB,MAAM;;;AAOjD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IADtB,YAAO,GAAG,kDAAkD;EACvB;EAC7CC,QAAQ,IAAU;EAEXC,aAAa,CAACC,SAAiB;IACpC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,IAAIJ,SAAS,CAAC;IAC9D,OAAON,EAAE,CAAC,IAAI,CAAC;EACjB;EAEOW,wBAAwB,CAC7BC,OAAe,EACfC,IAAY,EACZC,IAAY;IAEZ,OAAO,IAAI,CAACX,UAAU,CAACY,GAAG,CACxB,GAAG,IAAI,CAACC,OAAO,YAAYJ,OAAO,SAASC,IAAI,SAASC,IAAI,EAAE,CAC/D;EACH;EAEOG,UAAU,CACfC,IAAY,EACZC,KAAa,EACbC,QAAgB;IAEhB,OAAO,IAAI,CAACjB,UAAU,CAACkB,IAAI,CAAU,GAAG,IAAI,CAACL,OAAO,EAAE,EAAE;MACtDE,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX,CAAC;EACJ;EACOE,WAAW,CAChBZ,EAAU,EACVQ,IAAY,EACZC,KAAa,EACbC,QAAgB;IAEhB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACb,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACgB,GAAG,CAAEd,CAAC,IAClCA,CAAC,CAACC,EAAE,IAAIA,EAAE,GAAG;MAAEA,EAAE,EAAEA,EAAE;MAAEQ,IAAI,EAAEA,IAAI;MAAEC,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE,GAAGX,CAAC,CAC1E;IACD,OAAO,IAAI,CAACe,cAAc,CAACd,EAAE,CAAC;EAChC;EACOc,cAAc,CAACd,EAAU;IAC9B,OAAO,IAAI,CAACP,UAAU,CAACY,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,IAAIN,EAAE,EAAE,CAAC;EACrD;EAAC;qBAnDUT,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAwB,SAAdxB,cAAc;IAAAyB,YAFb;EAAM","names":["of","ProductService","constructor","httpClient","ngOnInit","deleteProduct","productID","products","filter","p","id","getPageProductsByKeyword","keyword","page","size","get","BaseURI","addProduct","name","price","quantity","post","editProduct","map","getProductById","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/product.service.ts"],"sourcesContent":["import { Product, PageProduct } from \"./../model/product.model\";\nimport { Injectable, OnInit } from \"@angular/core\";\nimport { Observable, of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService implements OnInit {\n  private products!: Array<Product>;\n  private BaseURI = \"http://localhost:8888/INVENTORY-SERVICE/products\";\n  constructor(private httpClient: HttpClient) {}\n  ngOnInit(): void {}\n\n  public deleteProduct(productID: string): Observable<boolean> {\n    this.products = this.products.filter((p) => p.id != productID);\n    return of(true);\n  }\n\n  public getPageProductsByKeyword(\n    keyword: string,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    return this.httpClient.get<PageProduct>(\n      `${this.BaseURI}?keyword=${keyword}&page=${page}&size=${size}`\n    );\n  }\n\n  public addProduct(\n    name: string,\n    price: number,\n    quantity: number\n  ): Observable<Product> {\n    return this.httpClient.post<Product>(`${this.BaseURI}`, {\n      name: name,\n      price: price,\n      quantity: quantity,\n    });\n  }\n  public editProduct(\n    id: string,\n    name: string,\n    price: number,\n    quantity: number\n  ): Observable<Product> {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map((p) =>\n      p.id == id ? { id: id, name: name, price: price, quantity: quantity } : p\n    );\n    return this.getProductById(id);\n  }\n  public getProductById(id: string): Observable<Product> {\n    return this.httpClient.get(`${this.BaseURI}/${id}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}