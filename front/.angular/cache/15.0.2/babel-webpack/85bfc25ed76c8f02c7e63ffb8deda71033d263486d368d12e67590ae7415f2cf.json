{"ast":null,"code":"import { of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.httpClient.get(\"http://localhost:8888/INVENTORY-SERVICE/products\")\n    //.get(\"http://localhost:8082/products\")\n    .subscribe({\n      next: ({\n        _embedded,\n        page\n      }) => {\n        console.log(_embedded.products, page);\n      },\n      error: err => console.table(err)\n    });\n    this.products = new Array();\n    for (let index = 0; index < 101; index++) {\n      this.products.push({\n        id: UUID.UUID(),\n        name: `Product ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4\n      });\n    }\n  }\n  ngOnInit() {}\n  getAllProducts() {\n    return of(this.products);\n  }\n  getPageProduct(page, size) {\n    let index = page * size;\n    let totalPages = ~~(this.products.length / size) + (this.products.length % size > 0 ? 1 : 0);\n    let prods = this.products.slice(index, index + size);\n    console.log({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  deleteProduct(productID) {\n    this.products = this.products.filter(p => p.id != productID);\n    return of(true);\n  }\n  setProductPromotion(productID) {\n    let product = this.products.find(p => p.id == productID);\n    if (product) {\n      product.promotion = !product.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error(\"Product not found\"));\n  }\n  getProductsByKeyword(keyword) {\n    let prods = this.products.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.products);\n    return of(prods);\n  }\n  getPageProductsByKeyword(keyword, page, size) {\n    let prods = this.products.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.products);\n    return this.pageOf(prods, page, size);\n  }\n  pageOf(products, page, size) {\n    let index = page * size;\n    let totalPages = ~~(products.length / size) + (products.length % size > 0 ? 1 : 0);\n    let prods = products.slice(index, index + size);\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  addProduct(name, price, promotion) {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion\n    });\n    return this.getProductById(uuid);\n  }\n  editProduct(id, name, price, promotion) {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map(p => p.id == id ? {\n      id: id,\n      name: name,\n      price: price,\n      promotion: promotion\n    } : p);\n    return this.getProductById(id);\n  }\n  getProductById(id) {\n    const product = this.products.find(p => p.id == id);\n    if (product == undefined) return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"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","names":["of","throwError","UUID","ProductService","constructor","httpClient","get","subscribe","next","_embedded","page","console","log","products","error","err","table","Array","index","push","id","name","Number","price","Math","round","random","promotion","ngOnInit","getAllProducts","getPageProduct","size","totalPages","length","prods","slice","deleteProduct","productID","filter","p","setProductPromotion","product","find","Error","getProductsByKeyword","keyword","toLowerCase","trim","includes","getPageProductsByKeyword","pageOf","addProduct","uuid","getProductById","editProduct","map","undefined","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/product.service.ts"],"sourcesContent":["import { Product, PageProduct } from \"./../model/product.model\";\nimport { Injectable, OnInit } from \"@angular/core\";\nimport { Observable, of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService implements OnInit {\n  private products!: Array<any>;\n  constructor(private httpClient: HttpClient) {\n    this.httpClient\n      .get(\"http://localhost:8888/INVENTORY-SERVICE/products\")\n      //.get(\"http://localhost:8082/products\")\n      .subscribe({\n        next: ({ _embedded, page }: any) => {\n          console.log(_embedded.products, page);\n        },\n        error: (err) => console.table(err),\n      });\n    this.products = new Array<Product>();\n    for (let index = 0; index < 101; index++) {\n      this.products.push({\n        id: UUID.UUID(),\n        name: `Product ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4,\n      });\n    }\n  }\n  ngOnInit(): void {}\n  public getAllProducts(): Observable<Array<Product>> {\n    return of(this.products);\n  }\n  public getPageProduct(page: number, size: number): Observable<PageProduct> {\n    let index = page * size;\n    let totalPages =\n      ~~(this.products.length / size) +\n      (this.products.length % size > 0 ? 1 : 0);\n    let prods = this.products.slice(index, index + size);\n    console.log({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public deleteProduct(productID: string): Observable<boolean> {\n    this.products = this.products.filter((p) => p.id != productID);\n    return of(true);\n  }\n\n  public setProductPromotion(productID: string): Observable<boolean> {\n    let product = this.products.find((p) => p.id == productID);\n    if (product) {\n      product.promotion = !product.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error(\"Product not found\"));\n  }\n  public getProductsByKeyword(keyword: string): Observable<Product[]> {\n    let prods = this.products.filter((p: Product) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.products\n    );\n    return of(prods);\n  }\n  public getPageProductsByKeyword(\n    keyword: string,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    let prods = this.products.filter((p: Product) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.products\n    );\n    return this.pageOf(prods, page, size);\n  }\n  public pageOf(\n    products: Array<Product>,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    let index = page * size;\n    let totalPages =\n      ~~(products.length / size) + (products.length % size > 0 ? 1 : 0);\n    let prods = products.slice(index, index + size);\n    return of({\n      products: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public addProduct(\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion,\n    });\n    return this.getProductById(uuid);\n  }\n  public editProduct(\n    id: string,\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map((p) =>\n      p.id == id\n        ? { id: id, name: name, price: price, promotion: promotion }\n        : p\n    );\n    return this.getProductById(id);\n  }\n  public getProductById(id: string): Observable<Product> {\n    const product = this.products.find((p) => p.id == id);\n    if (product == undefined)\n      return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}