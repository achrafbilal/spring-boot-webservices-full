{"ast":null,"code":"import { of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.BaseURI = \"http://localhost:8888/INVENTORY-SERVICE/products\";\n    this.products = new Array();\n    for (let index = 0; index < 101; index++) {\n      this.products.push({\n        id: UUID.UUID(),\n        name: `Product ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4\n      });\n    }\n  }\n  ngOnInit() {}\n  getAllProducts() {\n    this.httpClient.get(this.BaseURI).subscribe({\n      next: data => {\n        console.log(data);\n        alert(\"get products done\");\n      },\n      error: err => console.table(err)\n    });\n    return of(this.products);\n  }\n  deleteProduct(productID) {\n    this.products = this.products.filter(p => p.id != productID);\n    return of(true);\n  }\n  getProductsByKeyword(keyword) {\n    return this.httpClient.get(`${this.BaseURI}`);\n  }\n  getPageProductsByKeyword(keyword, page, size) {\n    return this.httpClient.get(`${this.BaseURI}?keyword=${keyword}&page=${page}&`);\n  }\n  addProduct(name, price, promotion) {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion\n    });\n    return this.getProductById(uuid);\n  }\n  editProduct(id, name, price, promotion) {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map(p => p.id == id ? {\n      id: id,\n      name: name,\n      price: price,\n      promotion: promotion\n    } : p);\n    return this.getProductById(id);\n  }\n  getProductById(id) {\n    const product = this.products.find(p => p.id == id);\n    if (product == undefined) return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"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","names":["of","throwError","UUID","ProductService","constructor","httpClient","products","Array","index","push","id","name","Number","price","Math","round","random","promotion","ngOnInit","getAllProducts","get","BaseURI","subscribe","next","data","console","log","alert","error","err","table","deleteProduct","productID","filter","p","getProductsByKeyword","keyword","getPageProductsByKeyword","page","size","addProduct","uuid","getProductById","editProduct","map","product","find","undefined","Error","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/product.service.ts"],"sourcesContent":["import { Product, PageProduct } from \"./../model/product.model\";\nimport { Injectable, OnInit } from \"@angular/core\";\nimport { Observable, of, throwError } from \"rxjs\";\nimport { UUID } from \"angular2-uuid\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProductService implements OnInit {\n  private products!: Array<Product>;\n  private BaseURI = \"http://localhost:8888/INVENTORY-SERVICE/products\";\n  constructor(private httpClient: HttpClient) {\n    this.products = new Array<Product>();\n    for (let index = 0; index < 101; index++) {\n      this.products.push({\n        id: UUID.UUID(),\n        name: `Product ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4,\n      });\n    }\n  }\n  ngOnInit(): void {}\n  public getAllProducts(): Observable<Array<Product>> {\n    this.httpClient.get(this.BaseURI).subscribe({\n      next: (data) => {\n        console.log(data);\n        alert(\"get products done\");\n      },\n      error: (err) => console.table(err),\n    });\n    return of(this.products);\n  }\n  public deleteProduct(productID: string): Observable<boolean> {\n    this.products = this.products.filter((p) => p.id != productID);\n    return of(true);\n  }\n\n  public getProductsByKeyword(keyword: string): Observable<PageProduct> {\n    return this.httpClient.get<PageProduct>(`${this.BaseURI}`);\n  }\n  public getPageProductsByKeyword(\n    keyword: string,\n    page: number,\n    size: number\n  ): Observable<PageProduct> {\n    return this.httpClient.get<PageProduct>(\n      `${this.BaseURI}?keyword=${keyword}&page=${page}&`\n    );\n  }\n  public addProduct(\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    const uuid = UUID.UUID();\n    this.products.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion,\n    });\n    return this.getProductById(uuid);\n  }\n  public editProduct(\n    id: string,\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Product> {\n    // this.products.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.products = this.products.map((p) =>\n      p.id == id\n        ? { id: id, name: name, price: price, promotion: promotion }\n        : p\n    );\n    return this.getProductById(id);\n  }\n  public getProductById(id: string): Observable<Product> {\n    const product = this.products.find((p) => p.id == id);\n    if (product == undefined)\n      return throwError(() => new Error(\"Product not found\"));\n    return of(product);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}