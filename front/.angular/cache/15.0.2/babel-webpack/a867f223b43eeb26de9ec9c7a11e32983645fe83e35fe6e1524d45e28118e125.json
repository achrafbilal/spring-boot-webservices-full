{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { UUID } from 'angular2-uuid';\nimport * as i0 from \"@angular/core\";\nexport class CustomerService {\n  constructor() {\n    this.customers = new Array();\n    for (let index = 0; index < 101; index++) {\n      this.customers.push({\n        id: UUID.UUID(),\n        name: `Customer ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4\n      });\n    }\n  }\n  getAllCustomers() {\n    // let rnd = Math.random();\n    // if (rnd < 0.1) return throwError(() => new Error('Random below 0.5'));\n    return of(this.customers);\n  }\n  getPageCustomer(page, size) {\n    let index = page * size;\n    let totalPages = ~~(this.customers.length / size) + (this.customers.length % size > 0 ? 1 : 0);\n    let prods = this.customers.slice(index, index + size);\n    console.log({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n    return of({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  deleteCustomer(customerID) {\n    this.customers = this.customers.filter(p => p.id != customerID);\n    return of(true);\n  }\n  setCustomerPromotion(customerID) {\n    let customer = this.customers.find(p => p.id == customerID);\n    if (customer) {\n      customer.promotion = !customer.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error('Customer not found'));\n  }\n  getCustomersByKeyword(keyword) {\n    let prods = this.customers.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.customers);\n    return of(prods);\n  }\n  getPageCustomersByKeyword(keyword, page, size) {\n    let prods = this.customers.filter(p => keyword.length > 0 ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim()) : this.customers);\n    return this.pageOf(prods, page, size);\n  }\n  pageOf(customers, page, size) {\n    let index = page * size;\n    let totalPages = ~~(customers.length / size) + (customers.length % size > 0 ? 1 : 0);\n    let prods = customers.slice(index, index + size);\n    return of({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages\n    });\n  }\n  addCustomer(name, price, promotion) {\n    const uuid = UUID.UUID();\n    this.customers.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion\n    });\n    return this.getCustomerById(uuid);\n  }\n  editCustomer(id, name, price, promotion) {\n    // this.customers.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.customers = this.customers.map(p => p.id == id ? {\n      id: id,\n      name: name,\n      price: price,\n      promotion: promotion\n    } : p);\n    return this.getCustomerById(id);\n  }\n  getCustomerById(id) {\n    const customer = this.customers.find(p => p.id == id);\n    if (customer == undefined) return throwError(() => new Error('Customer not found'));\n    return of(customer);\n  }\n  static #_ = this.ɵfac = function CustomerService_Factory(t) {\n    return new (t || CustomerService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomerService,\n    factory: CustomerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["of","throwError","UUID","CustomerService","constructor","customers","Array","index","push","id","name","Number","price","Math","round","random","promotion","getAllCustomers","getPageCustomer","page","size","totalPages","length","prods","slice","console","log","deleteCustomer","customerID","filter","p","setCustomerPromotion","customer","find","Error","getCustomersByKeyword","keyword","toLowerCase","trim","includes","getPageCustomersByKeyword","pageOf","addCustomer","uuid","getCustomerById","editCustomer","map","undefined","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/customer.service.ts"],"sourcesContent":["import { Customer, PageCustomer } from './../model/customer.model';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { UUID } from 'angular2-uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  private customers!: Array<any>;\n  constructor() {\n    this.customers = new Array<Customer>();\n    for (let index = 0; index < 101; index++) {\n      this.customers.push({\n        id: UUID.UUID(),\n        name: `Customer ${Number(index) + 1}`,\n        price: Math.round(Math.random() * 100) * 1000,\n        promotion: Math.random() > 0.4,\n      });\n    }\n  }\n  public getAllCustomers(): Observable<Array<Customer>> {\n    // let rnd = Math.random();\n    // if (rnd < 0.1) return throwError(() => new Error('Random below 0.5'));\n    return of(this.customers);\n  }\n  public getPageCustomer(page: number, size: number): Observable<PageCustomer> {\n    let index = page * size;\n    let totalPages =\n      ~~(this.customers.length / size) +\n      (this.customers.length % size > 0 ? 1 : 0);\n    let prods = this.customers.slice(index, index + size);\n    console.log({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n    return of({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public deleteCustomer(customerID: string): Observable<boolean> {\n    this.customers = this.customers.filter((p) => p.id != customerID);\n    return of(true);\n  }\n\n  public setCustomerPromotion(customerID: string): Observable<boolean> {\n    let customer = this.customers.find((p) => p.id == customerID);\n    if (customer) {\n      customer.promotion = !customer.promotion;\n      return of(true);\n    }\n    return throwError(() => new Error('Customer not found'));\n  }\n  public getCustomersByKeyword(keyword: string): Observable<Customer[]> {\n    let prods = this.customers.filter((p: Customer) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.customers\n    );\n    return of(prods);\n  }\n  public getPageCustomersByKeyword(\n    keyword: string,\n    page: number,\n    size: number\n  ): Observable<PageCustomer> {\n    let prods = this.customers.filter((p: Customer) =>\n      keyword.length > 0\n        ? p.name.toLowerCase().trim().includes(keyword.toLowerCase().trim())\n        : this.customers\n    );\n    return this.pageOf(prods, page, size);\n  }\n  public pageOf(\n    customers: Array<Customer>,\n    page: number,\n    size: number\n  ): Observable<PageCustomer> {\n    let index = page * size;\n    let totalPages =\n      ~~(customers.length / size) + (customers.length % size > 0 ? 1 : 0);\n    let prods = customers.slice(index, index + size);\n    return of({\n      customers: prods,\n      page: page,\n      size: size,\n      totalPages: totalPages,\n    });\n  }\n  public addCustomer(\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Customer> {\n    const uuid = UUID.UUID();\n    this.customers.push({\n      id: uuid,\n      name: name,\n      price: price,\n      promotion: promotion,\n    });\n    return this.getCustomerById(uuid);\n  }\n  public editCustomer(\n    id: string,\n    name: string,\n    price: number,\n    promotion: boolean\n  ): Observable<Customer> {\n    // this.customers.reduce({\n    //   id: uuid,\n    //   name: name,\n    //   price: price,\n    //   promotion: promotion,\n    // });\n    this.customers = this.customers.map((p) =>\n      p.id == id\n        ? { id: id, name: name, price: price, promotion: promotion }\n        : p\n    );\n    return this.getCustomerById(id);\n  }\n  public getCustomerById(id: string): Observable<Customer> {\n    const customer = this.customers.find((p) => p.id == id);\n    if (customer == undefined)\n      return throwError(() => new Error('Customer not found'));\n    return of(customer);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}