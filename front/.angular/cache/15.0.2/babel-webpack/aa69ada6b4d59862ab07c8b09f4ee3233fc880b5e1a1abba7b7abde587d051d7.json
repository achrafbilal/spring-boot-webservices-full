{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { UUID } from 'angular2-uuid';\nimport * as i0 from \"@angular/core\";\nexport class AuthenticationService {\n  constructor() {\n    this.users = [];\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'userI',\n      password: 'password',\n      firstName: 'user',\n      lastName: 'I',\n      email: 'userI.mail.com',\n      roles: ['USER']\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'userII',\n      password: 'password',\n      firstName: 'user',\n      lastName: 'II',\n      email: 'userII.mail.com',\n      roles: ['USER']\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'adminI',\n      password: 'password',\n      firstName: 'admin',\n      lastName: 'I',\n      email: 'adminI.mail.com',\n      roles: ['USER', 'ADMIN']\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'adminII',\n      password: 'password',\n      firstName: 'admin',\n      lastName: 'II',\n      email: 'adminII.mail.com',\n      roles: ['USER', 'ADMIN']\n    });\n  }\n  login(username, password) {\n    let appUser = this.users.find(u => u.username == username);\n    if (!appUser) return throwError(() => new Error('User not found'));\n    if (appUser.password !== password) return throwError(() => new Error('Wrong password'));\n    this.authenticateUser(appUser);\n    return of(appUser);\n  }\n  authenticateUser(appUser) {\n    this.authenticatedUser = appUser;\n    localStorage.setItem('appUser', JSON.stringify({\n      username: appUser.username,\n      roles: appUser.roles,\n      jwt: 'jwt'\n    }));\n    console.log(JSON.parse(localStorage.getItem('appUser') || ''));\n    return of(true);\n  }\n  isAdmin() {\n    return this.hasRole('ADMIN');\n  }\n  isUser() {\n    return this.hasRole('USER');\n  }\n  hasRole(role) {\n    console.log(this.authenticatedUser?.roles + ' => ' + this.authenticatedUser?.roles.includes(role));\n    return this.authenticatedUser?.roles.includes(role) ? true : false;\n  }\n  logout() {\n    this.authenticatedUser = undefined;\n    localStorage.removeItem('appUser');\n    return of(true);\n  }\n  isAuthenticated() {\n    return this.authenticatedUser != undefined;\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["of","throwError","UUID","AuthenticationService","constructor","users","push","userId","username","password","firstName","lastName","email","roles","login","appUser","find","u","Error","authenticateUser","authenticatedUser","localStorage","setItem","JSON","stringify","jwt","console","log","parse","getItem","isAdmin","hasRole","isUser","role","includes","logout","undefined","removeItem","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/services/authentication.service.ts"],"sourcesContent":["import { Observable, of, throwError } from 'rxjs';\nimport { UUID } from 'angular2-uuid';\nimport { AppUser } from './../model/user.model';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  users: AppUser[] = [];\n  authenticatedUser: AppUser | undefined;\n\n  constructor() {\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'userI',\n      password: 'password',\n      firstName: 'user',\n      lastName: 'I',\n      email: 'userI.mail.com',\n      roles: ['USER'],\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'userII',\n      password: 'password',\n      firstName: 'user',\n      lastName: 'II',\n      email: 'userII.mail.com',\n      roles: ['USER'],\n    });\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'adminI',\n      password: 'password',\n      firstName: 'admin',\n      lastName: 'I',\n      email: 'adminI.mail.com',\n      roles: ['USER', 'ADMIN'],\n    });\n\n    this.users.push({\n      userId: UUID.UUID(),\n      username: 'adminII',\n      password: 'password',\n      firstName: 'admin',\n      lastName: 'II',\n      email: 'adminII.mail.com',\n      roles: ['USER', 'ADMIN'],\n    });\n  }\n\n  public login(username: string, password: string): Observable<AppUser> {\n    let appUser = this.users.find((u) => u.username == username);\n\n    if (!appUser) return throwError(() => new Error('User not found'));\n    if (appUser.password !== password)\n      return throwError(() => new Error('Wrong password'));\n    this.authenticateUser(appUser);\n    return of(appUser);\n  }\n\n  public authenticateUser(appUser: AppUser): Observable<boolean> {\n    this.authenticatedUser = appUser;\n    localStorage.setItem(\n      'appUser',\n      JSON.stringify({\n        username: appUser.username,\n        roles: appUser.roles,\n        jwt: 'jwt',\n      })\n    );\n    console.log(JSON.parse(localStorage.getItem('appUser') || ''));\n    return of(true);\n  }\n\n  public isAdmin(): boolean {\n    return this.hasRole('ADMIN');\n  }\n\n  public isUser(): boolean {\n    return this.hasRole('USER');\n  }\n\n  public hasRole(role: string): boolean {\n    console.log(\n      this.authenticatedUser?.roles +\n        ' => ' +\n        this.authenticatedUser?.roles.includes(role)\n    );\n    return this.authenticatedUser?.roles.includes(role) ? true : false;\n  }\n\n  public logout(): Observable<boolean> {\n    this.authenticatedUser = undefined;\n    localStorage.removeItem('appUser');\n    return of(true);\n  }\n\n  public isAuthenticated(): boolean {\n    return this.authenticatedUser != undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}