{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { SmoothieChart, TimeSeries } from \"smoothie\";\nlet AnalyticsComponent = class AnalyticsComponent {\n  constructor(authService, analyticsService) {\n    this.authService = authService;\n    this.analyticsService = analyticsService;\n    this.canvas = document.getElementById(\"chart\");\n    this.chart = new SmoothieChart();\n  }\n  ngOnInit() {\n    this.series = new TimeSeries();\n    //this.canvas;\n    this.chart.addTimeSeries(this.series, {\n      strokeStyle: \"rgba(0, 255, 0, 1)\"\n    });\n    this.canvas = document.getElementById(\"chart\");\n    this.chart.streamTo(this.canvas, 500);\n    const context = this;\n    setInterval(function () {\n      context.series.append(Date.now(), Math.random() * 10000);\n      console.log(\"e\");\n    }, 500);\n    this.getAnalytics();\n  }\n  getAnalytics() {\n    this.analyticsService.getAnalytics().subscribe(data => {\n      console.log(data);\n    });\n  }\n};\nAnalyticsComponent = __decorate([Component({\n  selector: \"app-analytics\",\n  templateUrl: \"./analytics.component.html\",\n  styleUrls: [\"./analytics.component.scss\"]\n})], AnalyticsComponent);\nexport { AnalyticsComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,aAAa,EAAEC,UAAU,QAAQ,UAAU;AAS7C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAC7BC,YACSC,WAA4B,EAC3BC,gBAAkC;IADnC,gBAAW,GAAXD,WAAW;IACV,qBAAgB,GAAhBC,gBAAgB;IAG1B,WAAM,GAAsBC,QAAQ,CAACC,cAAc,CACjD,OAAO,CACa;IACtB,UAAK,GAAG,IAAIP,aAAa,EAAE;EALxB;EAMHQ,QAAQ;IACN,IAAI,CAACC,MAAM,GAAG,IAAIR,UAAU,EAAE;IAC9B;IACA,IAAI,CAACS,KAAK,CAACC,aAAa,CAAC,IAAI,CAACF,MAAM,EAAE;MACpCG,WAAW,EAAE;KACd,CAAC;IACF,IAAI,CAACC,MAAM,GAAGP,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAsB;IACnE,IAAI,CAACG,KAAK,CAACI,QAAQ,CAAC,IAAI,CAACD,MAAM,EAAE,GAAG,CAAC;IAErC,MAAME,OAAO,GAAG,IAAI;IACpBC,WAAW,CAAC;MACVD,OAAO,CAACN,MAAM,CAACQ,MAAM,CAACC,IAAI,CAACC,GAAG,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,GAAG,KAAK,CAAC;MACxDC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAClB,CAAC,EAAE,GAAG,CAAC;IACP,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,IAAI,CAACnB,gBAAgB,CAACmB,YAAY,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MACtDJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACnB,CAAC,CAAC;EACJ;CACD;AAhCYxB,kBAAkB,eAL9BH,SAAS,CAAC;EACT4B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW3B,kBAAkB,CAgC9B;SAhCYA,kBAAkB","names":["Component","SmoothieChart","TimeSeries","AnalyticsComponent","constructor","authService","analyticsService","document","getElementById","ngOnInit","series","chart","addTimeSeries","strokeStyle","canvas","streamTo","context","setInterval","append","Date","now","Math","random","console","log","getAnalytics","subscribe","data","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/web-service-full/webservices/front/src/app/analytics/analytics.component.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { SmoothieChart, TimeSeries } from \"smoothie\";\nimport { SecurityService } from \"../services/security.service\";\nimport { Analytic } from \"../model/analytics.model\";\n\n@Component({\n  selector: \"app-analytics\",\n  templateUrl: \"./analytics.component.html\",\n  styleUrls: [\"./analytics.component.scss\"],\n})\nexport class AnalyticsComponent implements OnInit {\n  constructor(\n    public authService: SecurityService,\n    private analyticsService: AnalyticsService\n  ) {}\n  series!: TimeSeries;\n  canvas: HTMLCanvasElement = document.getElementById(\n    \"chart\"\n  ) as HTMLCanvasElement;\n  chart = new SmoothieChart();\n  ngOnInit(): void {\n    this.series = new TimeSeries();\n    //this.canvas;\n    this.chart.addTimeSeries(this.series, {\n      strokeStyle: \"rgba(0, 255, 0, 1)\",\n    });\n    this.canvas = document.getElementById(\"chart\") as HTMLCanvasElement;\n    this.chart.streamTo(this.canvas, 500);\n\n    const context = this;\n    setInterval(function () {\n      context.series.append(Date.now(), Math.random() * 10000);\n      console.log(\"e\");\n    }, 500);\n    this.getAnalytics();\n  }\n\n  getAnalytics(): void {\n    this.analyticsService.getAnalytics().subscribe((data) => {\n      console.log(data);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}