{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Validators } from \"@angular/forms\";\nimport { Component } from \"@angular/core\";\nlet NewBillComponent = class NewBillComponent {\n  constructor(fb, billService, productService, customerService) {\n    this.fb = fb;\n    this.billService = billService;\n    this.productService = productService;\n    this.customerService = customerService;\n    this.message = \"\";\n    this.selectedProducts = [];\n    this.selectedCustomer = -1;\n  }\n  ngOnInit() {\n    this.billFormGroup = this.fb.group({\n      billingDate: this.fb.control(new Date(), [Validators.required])\n    });\n    this.productService.getPageProductsByKeyword(\"\", 0, 100).subscribe({\n      next: data => {\n        this.pageProduct = data;\n      },\n      error: err => alert(err.error)\n    });\n    this.customerService.getPageCustomersByKeyword(\"\", 0, 100).subscribe({\n      next: data => {\n        this.pageCustomer = data;\n      },\n      error: err => alert(err.error)\n    });\n  }\n  getErrorMessage(name, error) {\n    if (error[\"required\"]) return `${name}  is required`;\n    if (error[\"minlength\"]) return `The minimum length of ${name} is ${error[\"minlength\"][\"requiredLength\"]}`;\n    if (error[\"min\"]) return `The min value of ${name} is ${error[\"min\"][\"min\"]}`;\n    return \"\";\n  }\n  handleNewBillFormSubmit() {\n    const {\n      billingDate,\n      productItems,\n      customerID\n    } = this.billFormGroup.value;\n    console.log(customerID, productItems, billingDate);\n    // this.billService.addBill(id, name).subscribe({\n    //   next: (bill) => {\n    //     this.billFormGroup.reset();\n    //     this.message = \"Bill newed successfully\";\n    //   },\n    //   error: (err) => console.log(err),\n    // });\n  }\n\n  handleCloseAlert() {\n    this.message = \"\";\n  }\n  setSelectedCustomer(customerID) {\n    console.log(customerID);\n    this.selectedCustomer = customerID;\n  }\n  addSelectedProduct(productID) {}\n  removeSelectedProduct(productID) {}\n  isSelectedProduct(productID) {\n    return this.selectedProducts.includes(productID);\n  }\n  isSelectedCustomer(customerID) {\n    return this.selectedCustomer === customerID;\n  }\n};\nNewBillComponent = __decorate([Component({\n  selector: \"app-new-bill\",\n  templateUrl: \"./new-bill.component.html\",\n  styleUrls: [\"./new-bill.component.scss\"]\n})], NewBillComponent);\nexport { NewBillComponent };","map":{"version":3,"mappings":";AAOA,SAGEA,UAAU,QAEL,gBAAgB;AACvB,SAASC,SAAS,QAAgB,eAAe;AAO1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAQ3BC,YACUC,EAAe,EACfC,WAAwB,EACxBC,cAA8B,EAC9BC,eAAgC;IAHhC,OAAE,GAAFH,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,oBAAe,GAAfC,eAAe;IAVzB,YAAO,GAAW,EAAE;IAGpB,qBAAgB,GAAuB,EAAE;IACzC,qBAAgB,GAAW,CAAC,CAAC;EAO1B;EACHC,QAAQ;IACN,IAAI,CAACC,aAAa,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MACjCC,WAAW,EAAE,IAAI,CAACP,EAAE,CAACQ,OAAO,CAAC,IAAIC,IAAI,EAAE,EAAE,CAACb,UAAU,CAACc,QAAQ,CAAC;KAC/D,CAAC;IACF,IAAI,CAACR,cAAc,CAACS,wBAAwB,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAACC,SAAS,CAAC;MACjEC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,WAAW,GAAGD,IAAI;MACzB,CAAC;MACDE,KAAK,EAAGC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAACD,KAAK;KAChC,CAAC;IACF,IAAI,CAACb,eAAe,CAACgB,yBAAyB,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAACP,SAAS,CAAC;MACnEC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACM,YAAY,GAAGN,IAAI;MAC1B,CAAC;MACDE,KAAK,EAAGC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAACD,KAAK;KAChC,CAAC;EACJ;EACAK,eAAe,CAACC,IAAY,EAAEN,KAAuB;IACnD,IAAIA,KAAK,CAAC,UAAU,CAAC,EAAE,OAAO,GAAGM,IAAI,eAAe;IACpD,IAAIN,KAAK,CAAC,WAAW,CAAC,EACpB,OAAO,yBAAyBM,IAAI,OAAON,KAAK,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,EAAE;IACnF,IAAIA,KAAK,CAAC,KAAK,CAAC,EACd,OAAO,oBAAoBM,IAAI,OAAON,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;IAC7D,OAAO,EAAE;EACX;EACAO,uBAAuB;IACrB,MAAM;MAAEhB,WAAW;MAAEiB,YAAY;MAAEC;IAAU,CAAE,GAAG,IAAI,CAACpB,aAAa,CAACqB,KAAK;IAC1EC,OAAO,CAACC,GAAG,CAACH,UAAU,EAAED,YAAY,EAAEjB,WAAW,CAAC;IAClD;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EACAsB,gBAAgB;IACd,IAAI,CAACC,OAAO,GAAG,EAAE;EACnB;EACAC,mBAAmB,CAACN,UAAkB;IACpCE,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;IACvB,IAAI,CAACO,gBAAgB,GAAGP,UAAU;EACpC;EACAQ,kBAAkB,CAACC,SAAiB,GAAG;EACvCC,qBAAqB,CAACD,SAAiB,GAAG;EAC1CE,iBAAiB,CAACF,SAAiB;IACjC,OAAO,IAAI,CAACG,gBAAgB,CAACC,QAAQ,CAACJ,SAAS,CAAC;EAClD;EACAK,kBAAkB,CAACd,UAAkB;IACnC,OAAO,IAAI,CAACO,gBAAgB,KAAKP,UAAU;EAC7C;CACD;AAjEY3B,gBAAgB,eAL5BD,SAAS,CAAC;EACT2C,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW5C,gBAAgB,CAiE5B;SAjEYA,gBAAgB","names":["Validators","Component","NewBillComponent","constructor","fb","billService","productService","customerService","ngOnInit","billFormGroup","group","billingDate","control","Date","required","getPageProductsByKeyword","subscribe","next","data","pageProduct","error","err","alert","getPageCustomersByKeyword","pageCustomer","getErrorMessage","name","handleNewBillFormSubmit","productItems","customerID","value","console","log","handleCloseAlert","message","setSelectedCustomer","selectedCustomer","addSelectedProduct","productID","removeSelectedProduct","isSelectedProduct","selectedProducts","includes","isSelectedCustomer","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/achrafbilal/Documents/GitHub/tp-controle-spring-boot/front/src/app/new-bill/new-bill.component.ts"],"sourcesContent":["import { ProductItem } from \"./../model/productItem.model\";\nimport { Customer, PageCustomer } from \"./../model/customer.model\";\nimport { CustomerService } from \"./../services/customer.service\";\nimport { ProductService } from \"./../services/product.service\";\nimport { PageProduct, Product } from \"./../model/product.model\";\nimport { Bill } from \"./../model/bill.model\";\nimport { BillService } from \"./../services/bill.service\";\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-new-bill\",\n  templateUrl: \"./new-bill.component.html\",\n  styleUrls: [\"./new-bill.component.scss\"],\n})\nexport class NewBillComponent implements OnInit {\n  billFormGroup!: FormGroup;\n  message: string = \"\";\n  pageProduct!: PageProduct;\n  pageCustomer!: PageCustomer;\n  selectedProducts: Array<ProductItem> = [];\n  selectedCustomer: number = -1;\n\n  constructor(\n    private fb: FormBuilder,\n    private billService: BillService,\n    private productService: ProductService,\n    private customerService: CustomerService\n  ) {}\n  ngOnInit(): void {\n    this.billFormGroup = this.fb.group({\n      billingDate: this.fb.control(new Date(), [Validators.required]),\n    });\n    this.productService.getPageProductsByKeyword(\"\", 0, 100).subscribe({\n      next: (data) => {\n        this.pageProduct = data;\n      },\n      error: (err) => alert(err.error),\n    });\n    this.customerService.getPageCustomersByKeyword(\"\", 0, 100).subscribe({\n      next: (data) => {\n        this.pageCustomer = data;\n      },\n      error: (err) => alert(err.error),\n    });\n  }\n  getErrorMessage(name: string, error: ValidationErrors): string {\n    if (error[\"required\"]) return `${name}  is required`;\n    if (error[\"minlength\"])\n      return `The minimum length of ${name} is ${error[\"minlength\"][\"requiredLength\"]}`;\n    if (error[\"min\"])\n      return `The min value of ${name} is ${error[\"min\"][\"min\"]}`;\n    return \"\";\n  }\n  handleNewBillFormSubmit() {\n    const { billingDate, productItems, customerID } = this.billFormGroup.value;\n    console.log(customerID, productItems, billingDate);\n    // this.billService.addBill(id, name).subscribe({\n    //   next: (bill) => {\n    //     this.billFormGroup.reset();\n    //     this.message = \"Bill newed successfully\";\n    //   },\n    //   error: (err) => console.log(err),\n    // });\n  }\n  handleCloseAlert() {\n    this.message = \"\";\n  }\n  setSelectedCustomer(customerID: number) {\n    console.log(customerID);\n    this.selectedCustomer = customerID;\n  }\n  addSelectedProduct(productID: number) {}\n  removeSelectedProduct(productID: number) {}\n  isSelectedProduct(productID: number) {\n    return this.selectedProducts.includes(productID);\n  }\n  isSelectedCustomer(customerID: number) {\n    return this.selectedCustomer === customerID;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}