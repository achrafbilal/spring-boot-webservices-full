{"ast":null,"code":";\n(function (exports) {\n  /**\r\n   * @license\r\n   * MIT License:\r\n   *\r\n   * Copyright (c) 2010-2013, Joe Walnes\r\n   *               2013-2018, Drew Noakes\r\n   *\r\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n   * of this software and associated documentation files (the \"Software\"), to deal\r\n   * in the Software without restriction, including without limitation the rights\r\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n   * copies of the Software, and to permit persons to whom the Software is\r\n   * furnished to do so, subject to the following conditions:\r\n   *\r\n   * The above copyright notice and this permission notice shall be included in\r\n   * all copies or substantial portions of the Software.\r\n   *\r\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n   * THE SOFTWARE.\r\n   */\n\n  /**\r\n   * Smoothie Charts - http://smoothiecharts.org/\r\n   * (c) 2010-2013, Joe Walnes\r\n   *     2013-2018, Drew Noakes\r\n   *\r\n   * v1.0: Main charting library, by Joe Walnes\r\n   * v1.1: Auto scaling of axis, by Neil Dunn\r\n   * v1.2: fps (frames per second) option, by Mathias Petterson\r\n   * v1.3: Fix for divide by zero, by Paul Nikitochkin\r\n   * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\r\n   * v1.5: Set default frames per second to 50... smoother.\r\n   *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\r\n   *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\r\n   *       options.maxValue to fix scale, by Dmitry Vyal\r\n   * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\r\n   * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\r\n   *       Smooth rescaling, by Kostas Michalopoulos\r\n   * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\r\n   * v1.9: Display timestamps along the bottom, by Nick and Stev-io\r\n   *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\r\n   *       Refactored by Krishna Narni, to support timestamp formatting function\r\n   * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\r\n   * v1.11: options.grid.sharpLines option added, by @drewnoakes\r\n   *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\r\n   * v1.12: Support for horizontalLines added, by @drewnoakes\r\n   *        Support for yRangeFunction callback added, by @drewnoakes\r\n   * v1.13: Fixed typo (#32), by @alnikitich\r\n   * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\r\n   *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\r\n   * v1.15: Support for npm package (#18), by @dominictarr\r\n   *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\r\n   *        Minor performance and tidying, by @drewnoakes\r\n   * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\r\n   *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\r\n   *        Documentation and some local variable renaming for clarity, by @drewnoakes\r\n   * v1.17: Allow control over font size (#10), by @drewnoakes\r\n   *        Timestamp text won't overlap, by @drewnoakes\r\n   * v1.18: Allow control of max/min label precision, by @drewnoakes\r\n   *        Added 'borderVisible' chart option, by @drewnoakes\r\n   *        Allow drawing series with fill but no stroke (line), by @drewnoakes\r\n   * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\r\n   * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\r\n   * v1.21: Add 'step' interpolation mode, by @drewnoakes\r\n   * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\r\n   * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\r\n   * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\r\n   * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\r\n   *        Draw time labels on top of series, by @comolosabia\r\n   *        Add TimeSeries.clear function, by @drewnoakes\r\n   * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\r\n   * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\r\n   * v1.28: Add 'minValueScale' option, by @megawac\r\n   *        Fix 'labelPos' for different size of 'minValueString' 'maxValueString', by @henryn\r\n   * v1.29: Support responsive sizing, by @drewnoakes\r\n   * v1.29.1: Include types in package, and make property optional, by @TrentHouliston\r\n   * v1.30: Fix inverted logic in devicePixelRatio support, by @scanlime\r\n   * v1.31: Support tooltips, by @Sly1024 and @drewnoakes\r\n   * v1.32: Support frame rate limit, by @dpuyosa\r\n   * v1.33: Use Date static method instead of instance, by @nnnoel\r\n   *        Fix bug with tooltips when multiple charts on a page, by @jpmbiz70\r\n   * v1.34: Add disabled option to TimeSeries, by @TechGuard (#91)\r\n   *        Add nonRealtimeData option, by @annazhelt (#92, #93)\r\n   *        Add showIntermediateLabels option, by @annazhelt (#94)\r\n   *        Add displayDataFromPercentile option, by @annazhelt (#95)\r\n   *        Fix bug when hiding tooltip element, by @ralphwetzel (#96)\r\n   *        Support intermediate y-axis labels, by @beikeland (#99)\r\n   * v1.35: Fix issue with responsive mode at high DPI, by @drewnoakes (#101)\r\n   * v1.36: Add tooltipLabel to ITimeSeriesPresentationOptions.\r\n   *        If tooltipLabel is present, tooltipLabel displays inside tooltip\r\n   *        next to value, by @jackdesert (#102)\r\n   *        Fix bug rendering issue in series fill when using scroll backwards, by @olssonfredrik\r\n   *        Add title option, by @mesca\r\n   *        Fix data drop stoppage by rejecting NaNs in append(), by @timdrysdale\r\n   *        Allow setting interpolation per time series, by @WofWca (#123)\r\n   *        Fix chart constantly jumping in 1-2 pixel steps, by @WofWca (#131)\r\n   *        Fix a memory leak appearing when some `timeSeries.disabled === true`, by @WofWca (#132)\r\n   *        Fix: make all lines sharp, remove the `grid.sharpLines` option by @WofWca (#134)\r\n   *        Improve performance, by @WofWca (#135)\r\n   *        Fix `this.delay` not being respected with `nonRealtimeData: true`, by @WofWca (#137)\r\n   *        Fix series fill & stroke being inconsistent for last data time < render time, by @WofWca (#138)\r\n   * v1.36.1: Fix a potential XSS when `tooltipLabel` or `strokeStyle` are controlled by users, by @WofWca\r\n   */\n\n  // Date.now polyfill\n  Date.now = Date.now || function () {\n    return new Date().getTime();\n  };\n  var Util = {\n    extend: function () {\n      arguments[0] = arguments[0] || {};\n      for (var i = 1; i < arguments.length; i++) {\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) {\n            if (typeof arguments[i][key] === 'object') {\n              if (arguments[i][key] instanceof Array) {\n                arguments[0][key] = arguments[i][key];\n              } else {\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\n              }\n            } else {\n              arguments[0][key] = arguments[i][key];\n            }\n          }\n        }\n      }\n      return arguments[0];\n    },\n    binarySearch: function (data, value) {\n      var low = 0,\n        high = data.length;\n      while (low < high) {\n        var mid = low + high >> 1;\n        if (value < data[mid][0]) high = mid;else low = mid + 1;\n      }\n      return low;\n    },\n    // So lines (especially vertical and horizontal) look a) consistent along their length and b) sharp.\n    pixelSnap: function (position, lineWidth) {\n      if (lineWidth % 2 === 0) {\n        // Closest pixel edge.\n        return Math.round(position);\n      } else {\n        // Closest pixel center.\n        return Math.floor(position) + 0.5;\n      }\n    }\n  };\n\n  /**\r\n   * Initialises a new <code>TimeSeries</code> with optional data options.\r\n   *\r\n   * Options are of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\r\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\r\n   * }\r\n   * </pre>\r\n   *\r\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\r\n   *\r\n   * @constructor\r\n   */\n  function TimeSeries(options) {\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\n    this.disabled = false;\n    this.clear();\n  }\n  TimeSeries.defaultOptions = {\n    resetBoundsInterval: 3000,\n    resetBounds: true\n  };\n\n  /**\r\n   * Clears all data and state from this TimeSeries object.\r\n   */\n  TimeSeries.prototype.clear = function () {\n    this.data = [];\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\n  };\n\n  /**\r\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\r\n   *\r\n   * This causes the graph to scale itself in the y-axis.\r\n   */\n  TimeSeries.prototype.resetBounds = function () {\n    if (this.data.length) {\n      // Walk through all data points, finding the min/max value\n      this.maxValue = this.data[0][1];\n      this.minValue = this.data[0][1];\n      for (var i = 1; i < this.data.length; i++) {\n        var value = this.data[i][1];\n        if (value > this.maxValue) {\n          this.maxValue = value;\n        }\n        if (value < this.minValue) {\n          this.minValue = value;\n        }\n      }\n    } else {\n      // No data exists, so set min/max to NaN\n      this.maxValue = Number.NaN;\n      this.minValue = Number.NaN;\n    }\n  };\n\n  /**\r\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\r\n   *\r\n   * @param timestamp the position, in time, of this data point\r\n   * @param value the value of this data point\r\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\r\n   * whether it is replaced, or the values summed (defaults to false.)\r\n   */\n  TimeSeries.prototype.append = function (timestamp, value, sumRepeatedTimeStampValues) {\n    // Reject NaN\n    if (isNaN(timestamp) || isNaN(value)) {\n      return;\n    }\n    var lastI = this.data.length - 1;\n    if (lastI >= 0) {\n      // Rewind until we find the place for the new data\n      var i = lastI;\n      while (true) {\n        var iThData = this.data[i];\n        if (timestamp >= iThData[0]) {\n          if (timestamp === iThData[0]) {\n            // Update existing values in the array\n            if (sumRepeatedTimeStampValues) {\n              // Sum this value into the existing 'bucket'\n              iThData[1] += value;\n              value = iThData[1];\n            } else {\n              // Replace the previous value\n              iThData[1] = value;\n            }\n          } else {\n            // Splice into the correct position to keep timestamps in order\n            this.data.splice(i + 1, 0, [timestamp, value]);\n          }\n          break;\n        }\n        i--;\n        if (i < 0) {\n          // This new item is the oldest data\n          this.data.splice(0, 0, [timestamp, value]);\n          break;\n        }\n      }\n    } else {\n      // It's the first element\n      this.data.push([timestamp, value]);\n    }\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\n  };\n  TimeSeries.prototype.dropOldData = function (oldestValidTime, maxDataSetLength) {\n    // We must always keep one expired data point as we need this to draw the\n    // line that comes into the chart from the left, but any points prior to that can be removed.\n    var removeCount = 0;\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\n      removeCount++;\n    }\n    if (removeCount !== 0) {\n      this.data.splice(0, removeCount);\n    }\n  };\n\n  /**\r\n   * Initialises a new <code>SmoothieChart</code>.\r\n   *\r\n   * Options are optional, and should be of the form below. Just specify the values you\r\n   * need and the rest will be given sensible defaults as shown:\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\r\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\r\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\r\n   *   minValueScale: 1,                         // allows proportional padding to be added below the chart. for 10% padding, specify 1.1.\r\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\r\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\r\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\r\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\r\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\r\n   *     return parseFloat(min).toFixed(precision);\r\n   *   },\r\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\r\n   *     return parseFloat(max).toFixed(precision);\r\n   *   },\r\n   *   yIntermediateFormatter: function(intermediate, precision) { // callback function that formats the intermediate y value labels\r\n   *     return parseFloat(intermediate).toFixed(precision);\r\n   *   },\r\n   *   maxDataSetLength: 2,\r\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\r\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\r\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\r\n   *   scrollBackwards: false,                   // reverse the scroll direction of the chart\r\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\r\n   *   grid:\r\n   *   {\r\n   *     fillStyle: '#000000',                   // the background colour of the chart\r\n   *     lineWidth: 1,                           // the pixel width of grid lines\r\n   *     strokeStyle: '#777777',                 // colour of grid lines\r\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\r\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\r\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\r\n   *   },\r\n   *   labels\r\n   *   {\r\n   *     disabled: false,                        // enables/disables labels showing the min/max values\r\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\r\n   *     fontSize: 15,\r\n   *     fontFamily: 'sans-serif',\r\n   *     precision: 2,\r\n   *     showIntermediateLabels: false,          // shows intermediate labels between min and max values along y axis\r\n   *     intermediateLabelSameAxis: true,\r\n   *   },\r\n   *   title\r\n   *   {\r\n   *     text: '',                               // the text to display on the left side of the chart\r\n   *     fillStyle: '#ffffff',                   // colour for text\r\n   *     fontSize: 15,\r\n   *     fontFamily: 'sans-serif',\r\n   *     verticalAlign: 'middle'                 // one of 'top', 'middle', or 'bottom'\r\n   *   },\r\n   *   tooltip: false                            // show tooltip when mouse is over the chart\r\n   *   tooltipLine: {                            // properties for a vertical line at the cursor position\r\n   *     lineWidth: 1,\r\n   *     strokeStyle: '#BBBBBB'\r\n   *   },\r\n   *   tooltipFormatter: SmoothieChart.tooltipFormatter, // formatter function for tooltip text\r\n   *   nonRealtimeData: false,                   // use time of latest data as current time\r\n   *   displayDataFromPercentile: 1,             // display not latest data, but data from the given percentile\r\n   *                                             // useful when trying to see old data saved by setting a high value for maxDataSetLength\r\n   *                                             // should be a value between 0 and 1\r\n   *   responsive: false,                        // whether the chart should adapt to the size of the canvas\r\n   *   limitFPS: 0                               // maximum frame rate the chart will render at, in FPS (zero means no limit)\r\n   * }\r\n   * </pre>\r\n   *\r\n   * @constructor\r\n   */\n  function SmoothieChart(options) {\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\n    this.seriesSet = [];\n    this.currentValueRange = 1;\n    this.currentVisMinValue = 0;\n    this.lastRenderTimeMillis = 0;\n    this.lastChartTimestamp = 0;\n    this.mousemove = this.mousemove.bind(this);\n    this.mouseout = this.mouseout.bind(this);\n  }\n\n  /** Formats the HTML string content of the tooltip. */\n  SmoothieChart.tooltipFormatter = function (timestamp, data) {\n    var timestampFormatter = this.options.timestampFormatter || SmoothieChart.timeFormatter,\n      // A dummy element to hold children. Maybe there's a better way.\n      elements = document.createElement('div'),\n      label;\n    elements.appendChild(document.createTextNode(timestampFormatter(new Date(timestamp))));\n    for (var i = 0; i < data.length; ++i) {\n      label = data[i].series.options.tooltipLabel || '';\n      if (label !== '') {\n        label = label + ' ';\n      }\n      var dataEl = document.createElement('span');\n      dataEl.style.color = data[i].series.options.strokeStyle;\n      dataEl.appendChild(document.createTextNode(label + this.options.yMaxFormatter(data[i].value, this.options.labels.precision)));\n      elements.appendChild(document.createElement('br'));\n      elements.appendChild(dataEl);\n    }\n    return elements.innerHTML;\n  };\n  SmoothieChart.defaultChartOptions = {\n    millisPerPixel: 20,\n    enableDpiScaling: true,\n    yMinFormatter: function (min, precision) {\n      return parseFloat(min).toFixed(precision);\n    },\n    yMaxFormatter: function (max, precision) {\n      return parseFloat(max).toFixed(precision);\n    },\n    yIntermediateFormatter: function (intermediate, precision) {\n      return parseFloat(intermediate).toFixed(precision);\n    },\n    maxValueScale: 1,\n    minValueScale: 1,\n    interpolation: 'bezier',\n    scaleSmoothing: 0.125,\n    maxDataSetLength: 2,\n    scrollBackwards: false,\n    displayDataFromPercentile: 1,\n    grid: {\n      fillStyle: '#000000',\n      strokeStyle: '#777777',\n      lineWidth: 2,\n      millisPerLine: 1000,\n      verticalSections: 2,\n      borderVisible: true\n    },\n    labels: {\n      fillStyle: '#ffffff',\n      disabled: false,\n      fontSize: 10,\n      fontFamily: 'monospace',\n      precision: 2,\n      showIntermediateLabels: false,\n      intermediateLabelSameAxis: true\n    },\n    title: {\n      text: '',\n      fillStyle: '#ffffff',\n      fontSize: 15,\n      fontFamily: 'monospace',\n      verticalAlign: 'middle'\n    },\n    horizontalLines: [],\n    tooltip: false,\n    tooltipLine: {\n      lineWidth: 1,\n      strokeStyle: '#BBBBBB'\n    },\n    tooltipFormatter: SmoothieChart.tooltipFormatter,\n    nonRealtimeData: false,\n    responsive: false,\n    limitFPS: 0\n  };\n\n  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\n  SmoothieChart.AnimateCompatibility = function () {\n    var requestAnimationFrame = function (callback, element) {\n        var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n          return window.setTimeout(function () {\n            callback(Date.now());\n          }, 16);\n        };\n        return requestAnimationFrame.call(window, callback, element);\n      },\n      cancelAnimationFrame = function (id) {\n        var cancelAnimationFrame = window.cancelAnimationFrame || function (id) {\n          clearTimeout(id);\n        };\n        return cancelAnimationFrame.call(window, id);\n      };\n    return {\n      requestAnimationFrame: requestAnimationFrame,\n      cancelAnimationFrame: cancelAnimationFrame\n    };\n  }();\n  SmoothieChart.defaultSeriesPresentationOptions = {\n    lineWidth: 1,\n    strokeStyle: '#ffffff'\n  };\n\n  /**\r\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\r\n   *\r\n   * Presentation options should be of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   lineWidth: 1,\r\n   *   strokeStyle: '#ffffff',\r\n   *   fillStyle: undefined,\r\n   *   interpolation: undefined;\r\n   *   tooltipLabel: undefined\r\n   * }\r\n   * </pre>\r\n   */\n  SmoothieChart.prototype.addTimeSeries = function (timeSeries, options) {\n    this.seriesSet.push({\n      timeSeries: timeSeries,\n      options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)\n    });\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\n      timeSeries.resetBoundsTimerId = setInterval(function () {\n        timeSeries.resetBounds();\n      }, timeSeries.options.resetBoundsInterval);\n    }\n  };\n\n  /**\r\n   * Removes the specified <code>TimeSeries</code> from the chart.\r\n   */\n  SmoothieChart.prototype.removeTimeSeries = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        this.seriesSet.splice(i, 1);\n        break;\n      }\n    }\n    // If a timer was operating for that timeseries, remove it\n    if (timeSeries.resetBoundsTimerId) {\n      // Stop resetting the bounds, if we were\n      clearInterval(timeSeries.resetBoundsTimerId);\n    }\n  };\n\n  /**\r\n   * Gets render options for the specified <code>TimeSeries</code>.\r\n   *\r\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\r\n   * these settings are stored in the chart.\r\n   */\n  SmoothieChart.prototype.getTimeSeriesOptions = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        return this.seriesSet[i].options;\n      }\n    }\n  };\n\n  /**\r\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\r\n   */\n  SmoothieChart.prototype.bringToFront = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        var set = this.seriesSet.splice(i, 1);\n        this.seriesSet.push(set[0]);\n        break;\n      }\n    }\n  };\n\n  /**\r\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\r\n   *\r\n   * @param canvas the target canvas element\r\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\r\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\r\n   */\n  SmoothieChart.prototype.streamTo = function (canvas, delayMillis) {\n    this.canvas = canvas;\n    this.clientWidth = parseInt(this.canvas.getAttribute('width'));\n    this.clientHeight = parseInt(this.canvas.getAttribute('height'));\n    this.delay = delayMillis;\n    this.start();\n  };\n  SmoothieChart.prototype.getTooltipEl = function () {\n    // Create the tool tip element lazily\n    if (!this.tooltipEl) {\n      this.tooltipEl = document.createElement('div');\n      this.tooltipEl.className = 'smoothie-chart-tooltip';\n      this.tooltipEl.style.pointerEvents = 'none';\n      this.tooltipEl.style.position = 'absolute';\n      this.tooltipEl.style.display = 'none';\n      document.body.appendChild(this.tooltipEl);\n    }\n    return this.tooltipEl;\n  };\n  SmoothieChart.prototype.updateTooltip = function () {\n    if (!this.options.tooltip) {\n      return;\n    }\n    var el = this.getTooltipEl();\n    if (!this.mouseover || !this.options.tooltip) {\n      el.style.display = 'none';\n      return;\n    }\n    var time = this.lastChartTimestamp;\n\n    // x pixel to time\n    var t = this.options.scrollBackwards ? time - this.mouseX * this.options.millisPerPixel : time - (this.clientWidth - this.mouseX) * this.options.millisPerPixel;\n    var data = [];\n\n    // For each data set...\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (timeSeries.disabled) {\n        continue;\n      }\n\n      // find datapoint closest to time 't'\n      var closeIdx = Util.binarySearch(timeSeries.data, t);\n      if (closeIdx > 0 && closeIdx < timeSeries.data.length) {\n        data.push({\n          series: this.seriesSet[d],\n          index: closeIdx,\n          value: timeSeries.data[closeIdx][1]\n        });\n      }\n    }\n    if (data.length) {\n      // TODO make `tooltipFormatter` return element(s) instead of an HTML string so it's harder for users\n      // to introduce an XSS. This would be a breaking change.\n      el.innerHTML = this.options.tooltipFormatter.call(this, t, data);\n      el.style.display = 'block';\n    } else {\n      el.style.display = 'none';\n    }\n  };\n  SmoothieChart.prototype.mousemove = function (evt) {\n    this.mouseover = true;\n    this.mouseX = evt.offsetX;\n    this.mouseY = evt.offsetY;\n    this.mousePageX = evt.pageX;\n    this.mousePageY = evt.pageY;\n    if (!this.options.tooltip) {\n      return;\n    }\n    var el = this.getTooltipEl();\n    el.style.top = Math.round(this.mousePageY) + 'px';\n    el.style.left = Math.round(this.mousePageX) + 'px';\n    this.updateTooltip();\n  };\n  SmoothieChart.prototype.mouseout = function () {\n    this.mouseover = false;\n    this.mouseX = this.mouseY = -1;\n    if (this.tooltipEl) this.tooltipEl.style.display = 'none';\n  };\n\n  /**\r\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\r\n   */\n  SmoothieChart.prototype.resize = function () {\n    var dpr = !this.options.enableDpiScaling || !window ? 1 : window.devicePixelRatio,\n      width,\n      height;\n    if (this.options.responsive) {\n      // Newer behaviour: Use the canvas's size in the layout, and set the internal\n      // resolution according to that size and the device pixel ratio (eg: high DPI)\n      width = this.canvas.offsetWidth;\n      height = this.canvas.offsetHeight;\n      if (width !== this.lastWidth) {\n        this.lastWidth = width;\n        this.canvas.setAttribute('width', Math.floor(width * dpr).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n      if (height !== this.lastHeight) {\n        this.lastHeight = height;\n        this.canvas.setAttribute('height', Math.floor(height * dpr).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n      this.clientWidth = width;\n      this.clientHeight = height;\n    } else {\n      width = parseInt(this.canvas.getAttribute('width'));\n      height = parseInt(this.canvas.getAttribute('height'));\n      if (dpr !== 1) {\n        // Older behaviour: use the canvas's inner dimensions and scale the element's size\n        // according to that size and the device pixel ratio (eg: high DPI)\n\n        if (Math.floor(this.clientWidth * dpr) !== width) {\n          this.canvas.setAttribute('width', Math.floor(width * dpr).toString());\n          this.canvas.style.width = width + 'px';\n          this.clientWidth = width;\n          this.canvas.getContext('2d').scale(dpr, dpr);\n        }\n        if (Math.floor(this.clientHeight * dpr) !== height) {\n          this.canvas.setAttribute('height', Math.floor(height * dpr).toString());\n          this.canvas.style.height = height + 'px';\n          this.clientHeight = height;\n          this.canvas.getContext('2d').scale(dpr, dpr);\n        }\n      } else {\n        this.clientWidth = width;\n        this.clientHeight = height;\n      }\n    }\n  };\n\n  /**\r\n   * Starts the animation of this chart.\r\n   */\n  SmoothieChart.prototype.start = function () {\n    if (this.frame) {\n      // We're already running, so just return\n      return;\n    }\n    this.canvas.addEventListener('mousemove', this.mousemove);\n    this.canvas.addEventListener('mouseout', this.mouseout);\n\n    // Renders a frame, and queues the next frame for later rendering\n    var animate = function () {\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function () {\n        if (this.options.nonRealtimeData) {\n          var dateZero = new Date(0);\n          // find the data point with the latest timestamp\n          var maxTimeStamp = this.seriesSet.reduce(function (max, series) {\n            var dataSet = series.timeSeries.data;\n            var indexToCheck = Math.round(this.options.displayDataFromPercentile * dataSet.length) - 1;\n            indexToCheck = indexToCheck >= 0 ? indexToCheck : 0;\n            indexToCheck = indexToCheck <= dataSet.length - 1 ? indexToCheck : dataSet.length - 1;\n            if (dataSet && dataSet.length > 0) {\n              // timestamp corresponds to element 0 of the data point\n              var lastDataTimeStamp = dataSet[indexToCheck][0];\n              max = max > lastDataTimeStamp ? max : lastDataTimeStamp;\n            }\n            return max;\n          }.bind(this), dateZero);\n          // use the max timestamp as current time\n          this.render(this.canvas, maxTimeStamp > dateZero ? maxTimeStamp : null);\n        } else {\n          this.render();\n        }\n        animate();\n      }.bind(this));\n    }.bind(this);\n    animate();\n  };\n\n  /**\r\n   * Stops the animation of this chart.\r\n   */\n  SmoothieChart.prototype.stop = function () {\n    if (this.frame) {\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\n      delete this.frame;\n      this.canvas.removeEventListener('mousemove', this.mousemove);\n      this.canvas.removeEventListener('mouseout', this.mouseout);\n    }\n  };\n  SmoothieChart.prototype.updateValueRange = function () {\n    // Calculate the current scale of the chart, from all time series.\n    var chartOptions = this.options,\n      chartMaxValue = Number.NaN,\n      chartMinValue = Number.NaN;\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      // TODO(ndunn): We could calculate / track these values as they stream in.\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (timeSeries.disabled) {\n        continue;\n      }\n      if (!isNaN(timeSeries.maxValue)) {\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\n      }\n      if (!isNaN(timeSeries.minValue)) {\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\n      }\n    }\n\n    // Scale the chartMaxValue to add padding at the top if required\n    if (chartOptions.maxValue != null) {\n      chartMaxValue = chartOptions.maxValue;\n    } else {\n      chartMaxValue *= chartOptions.maxValueScale;\n    }\n\n    // Set the minimum if we've specified one\n    if (chartOptions.minValue != null) {\n      chartMinValue = chartOptions.minValue;\n    } else {\n      chartMinValue -= Math.abs(chartMinValue * chartOptions.minValueScale - chartMinValue);\n    }\n\n    // If a custom range function is set, call it\n    if (this.options.yRangeFunction) {\n      var range = this.options.yRangeFunction({\n        min: chartMinValue,\n        max: chartMaxValue\n      });\n      chartMinValue = range.min;\n      chartMaxValue = range.max;\n    }\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\n      var targetValueRange = chartMaxValue - chartMinValue;\n      var valueRangeDiff = targetValueRange - this.currentValueRange;\n      var minValueDiff = chartMinValue - this.currentVisMinValue;\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\n    }\n    this.valueRange = {\n      min: chartMinValue,\n      max: chartMaxValue\n    };\n  };\n  SmoothieChart.prototype.render = function (canvas, time) {\n    var nowMillis = Date.now();\n\n    // Respect any frame rate limit.\n    if (this.options.limitFPS > 0 && nowMillis - this.lastRenderTimeMillis < 1000 / this.options.limitFPS) return;\n    time = (time || nowMillis) - (this.delay || 0);\n\n    // Round time down to pixel granularity, so motion appears smoother.\n    time -= time % this.options.millisPerPixel;\n    if (!this.isAnimatingScale) {\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\n      // we actually need to paint anything yet. If not, we can return immediately.\n      var sameTime = this.lastChartTimestamp === time;\n      if (sameTime) {\n        // Render at least every 1/6th of a second. The canvas may be resized, which there is\n        // no reliable way to detect.\n        var needToRenderInCaseCanvasResized = nowMillis - this.lastRenderTimeMillis > 1000 / 6;\n        if (!needToRenderInCaseCanvasResized) {\n          return;\n        }\n      }\n    }\n    this.lastRenderTimeMillis = nowMillis;\n    this.lastChartTimestamp = time;\n    this.resize();\n    canvas = canvas || this.canvas;\n    var context = canvas.getContext('2d'),\n      chartOptions = this.options,\n      // Using `this.clientWidth` instead of `canvas.clientWidth` because the latter is slow.\n      dimensions = {\n        top: 0,\n        left: 0,\n        width: this.clientWidth,\n        height: this.clientHeight\n      },\n      // Calculate the threshold time for the oldest data points.\n      oldestValidTime = time - dimensions.width * chartOptions.millisPerPixel,\n      valueToYPosition = function (value, lineWidth) {\n        var offset = value - this.currentVisMinValue,\n          unsnapped = this.currentValueRange === 0 ? dimensions.height : dimensions.height * (1 - offset / this.currentValueRange);\n        return Util.pixelSnap(unsnapped, lineWidth);\n      }.bind(this),\n      timeToXPosition = function (t, lineWidth) {\n        var unsnapped = chartOptions.scrollBackwards ? (time - t) / chartOptions.millisPerPixel : dimensions.width - (time - t) / chartOptions.millisPerPixel;\n        return Util.pixelSnap(unsnapped, lineWidth);\n      };\n    this.updateValueRange();\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;\n\n    // Save the state of the canvas context, any transformations applied in this method\n    // will get removed from the stack at the end of this method when .restore() is called.\n    context.save();\n\n    // Move the origin.\n    context.translate(dimensions.left, dimensions.top);\n\n    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\n    // screen cheese (that phrase should need no explanation).\n    context.beginPath();\n    context.rect(0, 0, dimensions.width, dimensions.height);\n    context.clip();\n\n    // Clear the working area.\n    context.save();\n    context.fillStyle = chartOptions.grid.fillStyle;\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\n    context.restore();\n\n    // Grid lines...\n    context.save();\n    context.lineWidth = chartOptions.grid.lineWidth;\n    context.strokeStyle = chartOptions.grid.strokeStyle;\n    // Vertical (time) dividers.\n    if (chartOptions.grid.millisPerLine > 0) {\n      context.beginPath();\n      for (var t = time - time % chartOptions.grid.millisPerLine; t >= oldestValidTime; t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPosition(t, chartOptions.grid.lineWidth);\n        context.moveTo(gx, 0);\n        context.lineTo(gx, dimensions.height);\n      }\n      context.stroke();\n      context.closePath();\n    }\n\n    // Horizontal (value) dividers.\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n      var gy = Util.pixelSnap(v * dimensions.height / chartOptions.grid.verticalSections, chartOptions.grid.lineWidth);\n      context.beginPath();\n      context.moveTo(0, gy);\n      context.lineTo(dimensions.width, gy);\n      context.stroke();\n      context.closePath();\n    }\n    // Bounding rectangle.\n    if (chartOptions.grid.borderVisible) {\n      context.beginPath();\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\n      context.closePath();\n    }\n    context.restore();\n\n    // Draw any horizontal lines...\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\n        var line = chartOptions.horizontalLines[hl],\n          lineWidth = line.lineWidth || 1,\n          hly = valueToYPosition(line.value, lineWidth);\n        context.strokeStyle = line.color || '#ffffff';\n        context.lineWidth = lineWidth;\n        context.beginPath();\n        context.moveTo(0, hly);\n        context.lineTo(dimensions.width, hly);\n        context.stroke();\n        context.closePath();\n      }\n    }\n\n    // For each data set...\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      var timeSeries = this.seriesSet[d].timeSeries,\n        dataSet = timeSeries.data;\n\n      // Delete old data that's moved off the left of the chart.\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);\n      if (dataSet.length <= 1 || timeSeries.disabled) {\n        continue;\n      }\n      context.save();\n      var seriesOptions = this.seriesSet[d].options,\n        // Keep in mind that `context.lineWidth = 0` doesn't actually set it to `0`.\n        drawStroke = seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none',\n        lineWidthMaybeZero = drawStroke ? seriesOptions.lineWidth : 0;\n\n      // Draw the line...\n      context.beginPath();\n      // Retain lastX, lastY for calculating the control points of bezier curves.\n      var firstX = timeToXPosition(dataSet[0][0], lineWidthMaybeZero),\n        firstY = valueToYPosition(dataSet[0][1], lineWidthMaybeZero),\n        lastX = firstX,\n        lastY = firstY,\n        draw;\n      context.moveTo(firstX, firstY);\n      switch (seriesOptions.interpolation || chartOptions.interpolation) {\n        case \"linear\":\n        case \"line\":\n          {\n            draw = function (x, y, lastX, lastY) {\n              context.lineTo(x, y);\n            };\n            break;\n          }\n        case \"bezier\":\n        default:\n          {\n            // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\n            //\n            // Assuming A was the last point in the line plotted and B is the new point,\n            // we draw a curve with control points P and Q as below.\n            //\n            // A---P\n            //     |\n            //     |\n            //     |\n            //     Q---B\n            //\n            // Importantly, A and P are at the same y coordinate, as are B and Q. This is\n            // so adjacent curves appear to flow as one.\n            //\n            draw = function (x, y, lastX, lastY) {\n              context.bezierCurveTo(\n              // startPoint (A) is implicit from last iteration of loop\n              Math.round((lastX + x) / 2), lastY,\n              // controlPoint1 (P)\n              Math.round(lastX + x) / 2, y,\n              // controlPoint2 (Q)\n              x, y); // endPoint (B)\n            };\n\n            break;\n          }\n        case \"step\":\n          {\n            draw = function (x, y, lastX, lastY) {\n              context.lineTo(x, lastY);\n              context.lineTo(x, y);\n            };\n            break;\n          }\n      }\n      for (var i = 1; i < dataSet.length; i++) {\n        var iThData = dataSet[i],\n          x = timeToXPosition(iThData[0], lineWidthMaybeZero),\n          y = valueToYPosition(iThData[1], lineWidthMaybeZero);\n        draw(x, y, lastX, lastY);\n        lastX = x;\n        lastY = y;\n      }\n      if (drawStroke) {\n        context.lineWidth = seriesOptions.lineWidth;\n        context.strokeStyle = seriesOptions.strokeStyle;\n        context.stroke();\n      }\n      if (seriesOptions.fillStyle) {\n        // Close up the fill region.\n        context.lineTo(lastX, dimensions.height + lineWidthMaybeZero + 1);\n        context.lineTo(firstX, dimensions.height + lineWidthMaybeZero + 1);\n        context.fillStyle = seriesOptions.fillStyle;\n        context.fill();\n      }\n      context.restore();\n    }\n    if (chartOptions.tooltip && this.mouseX >= 0) {\n      // Draw vertical bar to show tooltip position\n      context.lineWidth = chartOptions.tooltipLine.lineWidth;\n      context.strokeStyle = chartOptions.tooltipLine.strokeStyle;\n      context.beginPath();\n      context.moveTo(this.mouseX, 0);\n      context.lineTo(this.mouseX, dimensions.height);\n      context.closePath();\n      context.stroke();\n    }\n    this.updateTooltip();\n    var labelsOptions = chartOptions.labels;\n    // Draw the axis values on the chart.\n    if (!labelsOptions.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, labelsOptions.precision),\n        minValueString = chartOptions.yMinFormatter(this.valueRange.min, labelsOptions.precision),\n        maxLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(maxValueString).width - 2,\n        minLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(minValueString).width - 2;\n      context.fillStyle = labelsOptions.fillStyle;\n      context.fillText(maxValueString, maxLabelPos, labelsOptions.fontSize);\n      context.fillText(minValueString, minLabelPos, dimensions.height - 2);\n    }\n\n    // Display intermediate y axis labels along y-axis to the left of the chart\n    if (labelsOptions.showIntermediateLabels && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max) && chartOptions.grid.verticalSections > 0) {\n      // show a label above every vertical section divider\n      var step = (this.valueRange.max - this.valueRange.min) / chartOptions.grid.verticalSections;\n      var stepPixels = dimensions.height / chartOptions.grid.verticalSections;\n      for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n        var gy = dimensions.height - Math.round(v * stepPixels),\n          yValue = chartOptions.yIntermediateFormatter(this.valueRange.min + v * step, labelsOptions.precision),\n          //left of right axis?\n          intermediateLabelPos = labelsOptions.intermediateLabelSameAxis ? chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(yValue).width - 2 : chartOptions.scrollBackwards ? dimensions.width - context.measureText(yValue).width - 2 : 0;\n        context.fillText(yValue, intermediateLabelPos, gy - chartOptions.grid.lineWidth);\n      }\n    }\n\n    // Display timestamps along x-axis at the bottom of the chart.\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\n      var textUntilX = chartOptions.scrollBackwards ? context.measureText(minValueString).width : dimensions.width - context.measureText(minValueString).width + 4;\n      for (var t = time - time % chartOptions.grid.millisPerLine; t >= oldestValidTime; t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPosition(t, 0);\n        // Only draw the timestamp if it won't overlap with the previously drawn one.\n        if (!chartOptions.scrollBackwards && gx < textUntilX || chartOptions.scrollBackwards && gx > textUntilX) {\n          // Formats the timestamp based on user specified formatting function\n          // SmoothieChart.timeFormatter function above is one such formatting option\n          var tx = new Date(t),\n            ts = chartOptions.timestampFormatter(tx),\n            tsWidth = context.measureText(ts).width;\n          textUntilX = chartOptions.scrollBackwards ? gx + tsWidth + 2 : gx - tsWidth - 2;\n          context.fillStyle = chartOptions.labels.fillStyle;\n          if (chartOptions.scrollBackwards) {\n            context.fillText(ts, gx, dimensions.height - 2);\n          } else {\n            context.fillText(ts, gx - tsWidth, dimensions.height - 2);\n          }\n        }\n      }\n    }\n\n    // Display title.\n    if (chartOptions.title.text !== '') {\n      context.font = chartOptions.title.fontSize + 'px ' + chartOptions.title.fontFamily;\n      var titleXPos = chartOptions.scrollBackwards ? dimensions.width - context.measureText(chartOptions.title.text).width - 2 : 2;\n      if (chartOptions.title.verticalAlign == 'bottom') {\n        context.textBaseline = 'bottom';\n        var titleYPos = dimensions.height;\n      } else if (chartOptions.title.verticalAlign == 'middle') {\n        context.textBaseline = 'middle';\n        var titleYPos = dimensions.height / 2;\n      } else {\n        context.textBaseline = 'top';\n        var titleYPos = 0;\n      }\n      context.fillStyle = chartOptions.title.fillStyle;\n      context.fillText(chartOptions.title.text, titleXPos, titleYPos);\n    }\n    context.restore(); // See .save() above.\n  };\n\n  // Sample timestamp formatting function\n  SmoothieChart.timeFormatter = function (date) {\n    function pad2(number) {\n      return (number < 10 ? '0' : '') + number;\n    }\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\n  };\n  exports.TimeSeries = TimeSeries;\n  exports.SmoothieChart = SmoothieChart;\n})(typeof exports === 'undefined' ? this : exports);","map":{"version":3,"names":["exports","Date","now","getTime","Util","extend","arguments","i","length","key","hasOwnProperty","Array","binarySearch","data","value","low","high","mid","pixelSnap","position","lineWidth","Math","round","floor","TimeSeries","options","defaultOptions","disabled","clear","resetBoundsInterval","resetBounds","prototype","maxValue","Number","NaN","minValue","append","timestamp","sumRepeatedTimeStampValues","isNaN","lastI","iThData","splice","push","max","min","dropOldData","oldestValidTime","maxDataSetLength","removeCount","SmoothieChart","defaultChartOptions","seriesSet","currentValueRange","currentVisMinValue","lastRenderTimeMillis","lastChartTimestamp","mousemove","bind","mouseout","tooltipFormatter","timestampFormatter","timeFormatter","elements","document","createElement","label","appendChild","createTextNode","series","tooltipLabel","dataEl","style","color","strokeStyle","yMaxFormatter","labels","precision","innerHTML","millisPerPixel","enableDpiScaling","yMinFormatter","parseFloat","toFixed","yIntermediateFormatter","intermediate","maxValueScale","minValueScale","interpolation","scaleSmoothing","scrollBackwards","displayDataFromPercentile","grid","fillStyle","millisPerLine","verticalSections","borderVisible","fontSize","fontFamily","showIntermediateLabels","intermediateLabelSameAxis","title","text","verticalAlign","horizontalLines","tooltip","tooltipLine","nonRealtimeData","responsive","limitFPS","AnimateCompatibility","requestAnimationFrame","callback","element","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","call","cancelAnimationFrame","id","clearTimeout","defaultSeriesPresentationOptions","addTimeSeries","timeSeries","resetBoundsTimerId","setInterval","removeTimeSeries","numSeries","clearInterval","getTimeSeriesOptions","bringToFront","set","streamTo","canvas","delayMillis","clientWidth","parseInt","getAttribute","clientHeight","delay","start","getTooltipEl","tooltipEl","className","pointerEvents","display","body","updateTooltip","el","mouseover","time","t","mouseX","d","closeIdx","index","evt","offsetX","mouseY","offsetY","mousePageX","pageX","mousePageY","pageY","top","left","resize","dpr","devicePixelRatio","width","height","offsetWidth","offsetHeight","lastWidth","setAttribute","toString","getContext","scale","lastHeight","frame","addEventListener","animate","dateZero","maxTimeStamp","reduce","dataSet","indexToCheck","lastDataTimeStamp","render","stop","removeEventListener","updateValueRange","chartOptions","chartMaxValue","chartMinValue","abs","yRangeFunction","range","targetValueRange","valueRangeDiff","minValueDiff","isAnimatingScale","valueRange","nowMillis","sameTime","needToRenderInCaseCanvasResized","context","dimensions","valueToYPosition","offset","unsnapped","timeToXPosition","font","save","translate","beginPath","rect","clip","clearRect","fillRect","restore","gx","moveTo","lineTo","stroke","closePath","v","gy","strokeRect","hl","line","hly","seriesOptions","drawStroke","lineWidthMaybeZero","firstX","firstY","lastX","lastY","draw","x","y","bezierCurveTo","fill","labelsOptions","maxValueString","minValueString","maxLabelPos","measureText","minLabelPos","fillText","step","stepPixels","yValue","intermediateLabelPos","textUntilX","tx","ts","tsWidth","titleXPos","textBaseline","titleYPos","date","pad2","number","getHours","getMinutes","getSeconds"],"sources":["/Users/achrafbilal/Documents/GitHub/web-service-full/webservices/front/node_modules/smoothie/smoothie.js"],"sourcesContent":[";(function(exports) {\r\n\r\n/**\r\n * @license\r\n * MIT License:\r\n *\r\n * Copyright (c) 2010-2013, Joe Walnes\r\n *               2013-2018, Drew Noakes\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Smoothie Charts - http://smoothiecharts.org/\r\n * (c) 2010-2013, Joe Walnes\r\n *     2013-2018, Drew Noakes\r\n *\r\n * v1.0: Main charting library, by Joe Walnes\r\n * v1.1: Auto scaling of axis, by Neil Dunn\r\n * v1.2: fps (frames per second) option, by Mathias Petterson\r\n * v1.3: Fix for divide by zero, by Paul Nikitochkin\r\n * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\r\n * v1.5: Set default frames per second to 50... smoother.\r\n *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\r\n *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\r\n *       options.maxValue to fix scale, by Dmitry Vyal\r\n * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\r\n * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\r\n *       Smooth rescaling, by Kostas Michalopoulos\r\n * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\r\n * v1.9: Display timestamps along the bottom, by Nick and Stev-io\r\n *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\r\n *       Refactored by Krishna Narni, to support timestamp formatting function\r\n * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\r\n * v1.11: options.grid.sharpLines option added, by @drewnoakes\r\n *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\r\n * v1.12: Support for horizontalLines added, by @drewnoakes\r\n *        Support for yRangeFunction callback added, by @drewnoakes\r\n * v1.13: Fixed typo (#32), by @alnikitich\r\n * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\r\n *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\r\n * v1.15: Support for npm package (#18), by @dominictarr\r\n *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\r\n *        Minor performance and tidying, by @drewnoakes\r\n * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\r\n *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\r\n *        Documentation and some local variable renaming for clarity, by @drewnoakes\r\n * v1.17: Allow control over font size (#10), by @drewnoakes\r\n *        Timestamp text won't overlap, by @drewnoakes\r\n * v1.18: Allow control of max/min label precision, by @drewnoakes\r\n *        Added 'borderVisible' chart option, by @drewnoakes\r\n *        Allow drawing series with fill but no stroke (line), by @drewnoakes\r\n * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\r\n * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\r\n * v1.21: Add 'step' interpolation mode, by @drewnoakes\r\n * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\r\n * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\r\n * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\r\n * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\r\n *        Draw time labels on top of series, by @comolosabia\r\n *        Add TimeSeries.clear function, by @drewnoakes\r\n * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\r\n * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\r\n * v1.28: Add 'minValueScale' option, by @megawac\r\n *        Fix 'labelPos' for different size of 'minValueString' 'maxValueString', by @henryn\r\n * v1.29: Support responsive sizing, by @drewnoakes\r\n * v1.29.1: Include types in package, and make property optional, by @TrentHouliston\r\n * v1.30: Fix inverted logic in devicePixelRatio support, by @scanlime\r\n * v1.31: Support tooltips, by @Sly1024 and @drewnoakes\r\n * v1.32: Support frame rate limit, by @dpuyosa\r\n * v1.33: Use Date static method instead of instance, by @nnnoel\r\n *        Fix bug with tooltips when multiple charts on a page, by @jpmbiz70\r\n * v1.34: Add disabled option to TimeSeries, by @TechGuard (#91)\r\n *        Add nonRealtimeData option, by @annazhelt (#92, #93)\r\n *        Add showIntermediateLabels option, by @annazhelt (#94)\r\n *        Add displayDataFromPercentile option, by @annazhelt (#95)\r\n *        Fix bug when hiding tooltip element, by @ralphwetzel (#96)\r\n *        Support intermediate y-axis labels, by @beikeland (#99)\r\n * v1.35: Fix issue with responsive mode at high DPI, by @drewnoakes (#101)\r\n * v1.36: Add tooltipLabel to ITimeSeriesPresentationOptions.\r\n *        If tooltipLabel is present, tooltipLabel displays inside tooltip\r\n *        next to value, by @jackdesert (#102)\r\n *        Fix bug rendering issue in series fill when using scroll backwards, by @olssonfredrik\r\n *        Add title option, by @mesca\r\n *        Fix data drop stoppage by rejecting NaNs in append(), by @timdrysdale\r\n *        Allow setting interpolation per time series, by @WofWca (#123)\r\n *        Fix chart constantly jumping in 1-2 pixel steps, by @WofWca (#131)\r\n *        Fix a memory leak appearing when some `timeSeries.disabled === true`, by @WofWca (#132)\r\n *        Fix: make all lines sharp, remove the `grid.sharpLines` option by @WofWca (#134)\r\n *        Improve performance, by @WofWca (#135)\r\n *        Fix `this.delay` not being respected with `nonRealtimeData: true`, by @WofWca (#137)\r\n *        Fix series fill & stroke being inconsistent for last data time < render time, by @WofWca (#138)\r\n * v1.36.1: Fix a potential XSS when `tooltipLabel` or `strokeStyle` are controlled by users, by @WofWca\r\n */\r\n\r\n  // Date.now polyfill\r\n  Date.now = Date.now || function() { return new Date().getTime(); };\r\n\r\n  var Util = {\r\n    extend: function() {\r\n      arguments[0] = arguments[0] || {};\r\n      for (var i = 1; i < arguments.length; i++)\r\n      {\r\n        for (var key in arguments[i])\r\n        {\r\n          if (arguments[i].hasOwnProperty(key))\r\n          {\r\n            if (typeof(arguments[i][key]) === 'object') {\r\n              if (arguments[i][key] instanceof Array) {\r\n                arguments[0][key] = arguments[i][key];\r\n              } else {\r\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\r\n              }\r\n            } else {\r\n              arguments[0][key] = arguments[i][key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return arguments[0];\r\n    },\r\n    binarySearch: function(data, value) {\r\n      var low = 0,\r\n          high = data.length;\r\n      while (low < high) {\r\n        var mid = (low + high) >> 1;\r\n        if (value < data[mid][0])\r\n          high = mid;\r\n        else\r\n          low = mid + 1;\r\n      }\r\n      return low;\r\n    },\r\n    // So lines (especially vertical and horizontal) look a) consistent along their length and b) sharp.\r\n    pixelSnap: function(position, lineWidth) {\r\n      if (lineWidth % 2 === 0) {\r\n        // Closest pixel edge.\r\n        return Math.round(position);\r\n      } else {\r\n        // Closest pixel center.\r\n        return Math.floor(position) + 0.5;\r\n      }\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Initialises a new <code>TimeSeries</code> with optional data options.\r\n   *\r\n   * Options are of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\r\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\r\n   * }\r\n   * </pre>\r\n   *\r\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\r\n   *\r\n   * @constructor\r\n   */\r\n  function TimeSeries(options) {\r\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\r\n    this.disabled = false;\r\n    this.clear();\r\n  }\r\n\r\n  TimeSeries.defaultOptions = {\r\n    resetBoundsInterval: 3000,\r\n    resetBounds: true\r\n  };\r\n\r\n  /**\r\n   * Clears all data and state from this TimeSeries object.\r\n   */\r\n  TimeSeries.prototype.clear = function() {\r\n    this.data = [];\r\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\r\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\r\n  };\r\n\r\n  /**\r\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\r\n   *\r\n   * This causes the graph to scale itself in the y-axis.\r\n   */\r\n  TimeSeries.prototype.resetBounds = function() {\r\n    if (this.data.length) {\r\n      // Walk through all data points, finding the min/max value\r\n      this.maxValue = this.data[0][1];\r\n      this.minValue = this.data[0][1];\r\n      for (var i = 1; i < this.data.length; i++) {\r\n        var value = this.data[i][1];\r\n        if (value > this.maxValue) {\r\n          this.maxValue = value;\r\n        }\r\n        if (value < this.minValue) {\r\n          this.minValue = value;\r\n        }\r\n      }\r\n    } else {\r\n      // No data exists, so set min/max to NaN\r\n      this.maxValue = Number.NaN;\r\n      this.minValue = Number.NaN;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\r\n   *\r\n   * @param timestamp the position, in time, of this data point\r\n   * @param value the value of this data point\r\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\r\n   * whether it is replaced, or the values summed (defaults to false.)\r\n   */\r\n  TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {\r\n\t// Reject NaN\r\n\tif (isNaN(timestamp) || isNaN(value)){\r\n\t\treturn\r\n\t}  \r\n\r\n    var lastI = this.data.length - 1;\r\n    if (lastI >= 0) {\r\n      // Rewind until we find the place for the new data\r\n      var i = lastI;\r\n      while (true) {\r\n        var iThData = this.data[i];\r\n        if (timestamp >= iThData[0]) {\r\n          if (timestamp === iThData[0]) {\r\n            // Update existing values in the array\r\n            if (sumRepeatedTimeStampValues) {\r\n              // Sum this value into the existing 'bucket'\r\n              iThData[1] += value;\r\n              value = iThData[1];\r\n            } else {\r\n              // Replace the previous value\r\n              iThData[1] = value;\r\n            }\r\n          } else {\r\n            // Splice into the correct position to keep timestamps in order\r\n            this.data.splice(i + 1, 0, [timestamp, value]);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        i--;\r\n        if (i < 0) {\r\n          // This new item is the oldest data\r\n          this.data.splice(0, 0, [timestamp, value]);\r\n\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      // It's the first element\r\n      this.data.push([timestamp, value]);\r\n    }\r\n\r\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\r\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\r\n  };\r\n\r\n  TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {\r\n    // We must always keep one expired data point as we need this to draw the\r\n    // line that comes into the chart from the left, but any points prior to that can be removed.\r\n    var removeCount = 0;\r\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\r\n      removeCount++;\r\n    }\r\n    if (removeCount !== 0) {\r\n      this.data.splice(0, removeCount);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initialises a new <code>SmoothieChart</code>.\r\n   *\r\n   * Options are optional, and should be of the form below. Just specify the values you\r\n   * need and the rest will be given sensible defaults as shown:\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\r\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\r\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\r\n   *   minValueScale: 1,                         // allows proportional padding to be added below the chart. for 10% padding, specify 1.1.\r\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\r\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\r\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\r\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\r\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\r\n   *     return parseFloat(min).toFixed(precision);\r\n   *   },\r\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\r\n   *     return parseFloat(max).toFixed(precision);\r\n   *   },\r\n   *   yIntermediateFormatter: function(intermediate, precision) { // callback function that formats the intermediate y value labels\r\n   *     return parseFloat(intermediate).toFixed(precision);\r\n   *   },\r\n   *   maxDataSetLength: 2,\r\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\r\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\r\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\r\n   *   scrollBackwards: false,                   // reverse the scroll direction of the chart\r\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\r\n   *   grid:\r\n   *   {\r\n   *     fillStyle: '#000000',                   // the background colour of the chart\r\n   *     lineWidth: 1,                           // the pixel width of grid lines\r\n   *     strokeStyle: '#777777',                 // colour of grid lines\r\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\r\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\r\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\r\n   *   },\r\n   *   labels\r\n   *   {\r\n   *     disabled: false,                        // enables/disables labels showing the min/max values\r\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\r\n   *     fontSize: 15,\r\n   *     fontFamily: 'sans-serif',\r\n   *     precision: 2,\r\n   *     showIntermediateLabels: false,          // shows intermediate labels between min and max values along y axis\r\n   *     intermediateLabelSameAxis: true,\r\n   *   },\r\n   *   title\r\n   *   {\r\n   *     text: '',                               // the text to display on the left side of the chart\r\n   *     fillStyle: '#ffffff',                   // colour for text\r\n   *     fontSize: 15,\r\n   *     fontFamily: 'sans-serif',\r\n   *     verticalAlign: 'middle'                 // one of 'top', 'middle', or 'bottom'\r\n   *   },\r\n   *   tooltip: false                            // show tooltip when mouse is over the chart\r\n   *   tooltipLine: {                            // properties for a vertical line at the cursor position\r\n   *     lineWidth: 1,\r\n   *     strokeStyle: '#BBBBBB'\r\n   *   },\r\n   *   tooltipFormatter: SmoothieChart.tooltipFormatter, // formatter function for tooltip text\r\n   *   nonRealtimeData: false,                   // use time of latest data as current time\r\n   *   displayDataFromPercentile: 1,             // display not latest data, but data from the given percentile\r\n   *                                             // useful when trying to see old data saved by setting a high value for maxDataSetLength\r\n   *                                             // should be a value between 0 and 1\r\n   *   responsive: false,                        // whether the chart should adapt to the size of the canvas\r\n   *   limitFPS: 0                               // maximum frame rate the chart will render at, in FPS (zero means no limit)\r\n   * }\r\n   * </pre>\r\n   *\r\n   * @constructor\r\n   */\r\n  function SmoothieChart(options) {\r\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\r\n    this.seriesSet = [];\r\n    this.currentValueRange = 1;\r\n    this.currentVisMinValue = 0;\r\n    this.lastRenderTimeMillis = 0;\r\n    this.lastChartTimestamp = 0;\r\n\r\n    this.mousemove = this.mousemove.bind(this);\r\n    this.mouseout = this.mouseout.bind(this);\r\n  }\r\n\r\n  /** Formats the HTML string content of the tooltip. */\r\n  SmoothieChart.tooltipFormatter = function (timestamp, data) {\r\n      var timestampFormatter = this.options.timestampFormatter || SmoothieChart.timeFormatter,\r\n          // A dummy element to hold children. Maybe there's a better way.\r\n          elements = document.createElement('div'),\r\n          label;\r\n      elements.appendChild(document.createTextNode(\r\n        timestampFormatter(new Date(timestamp))\r\n      ));\r\n\r\n      for (var i = 0; i < data.length; ++i) {\r\n        label = data[i].series.options.tooltipLabel || ''\r\n        if (label !== ''){\r\n            label = label + ' ';\r\n        }\r\n        var dataEl = document.createElement('span');\r\n        dataEl.style.color = data[i].series.options.strokeStyle;\r\n        dataEl.appendChild(document.createTextNode(\r\n          label + this.options.yMaxFormatter(data[i].value, this.options.labels.precision)\r\n        ));\r\n        elements.appendChild(document.createElement('br'));\r\n        elements.appendChild(dataEl);\r\n      }\r\n\r\n      return elements.innerHTML;\r\n  };\r\n\r\n  SmoothieChart.defaultChartOptions = {\r\n    millisPerPixel: 20,\r\n    enableDpiScaling: true,\r\n    yMinFormatter: function(min, precision) {\r\n      return parseFloat(min).toFixed(precision);\r\n    },\r\n    yMaxFormatter: function(max, precision) {\r\n      return parseFloat(max).toFixed(precision);\r\n    },\r\n    yIntermediateFormatter: function(intermediate, precision) {\r\n      return parseFloat(intermediate).toFixed(precision);\r\n    },\r\n    maxValueScale: 1,\r\n    minValueScale: 1,\r\n    interpolation: 'bezier',\r\n    scaleSmoothing: 0.125,\r\n    maxDataSetLength: 2,\r\n    scrollBackwards: false,\r\n    displayDataFromPercentile: 1,\r\n    grid: {\r\n      fillStyle: '#000000',\r\n      strokeStyle: '#777777',\r\n      lineWidth: 2,\r\n      millisPerLine: 1000,\r\n      verticalSections: 2,\r\n      borderVisible: true\r\n    },\r\n    labels: {\r\n      fillStyle: '#ffffff',\r\n      disabled: false,\r\n      fontSize: 10,\r\n      fontFamily: 'monospace',\r\n      precision: 2,\r\n      showIntermediateLabels: false,\r\n      intermediateLabelSameAxis: true,\r\n    },\r\n    title: {\r\n      text: '',\r\n      fillStyle: '#ffffff',\r\n      fontSize: 15,\r\n      fontFamily: 'monospace',\r\n      verticalAlign: 'middle'\r\n    },\r\n    horizontalLines: [],\r\n    tooltip: false,\r\n    tooltipLine: {\r\n      lineWidth: 1,\r\n      strokeStyle: '#BBBBBB'\r\n    },\r\n    tooltipFormatter: SmoothieChart.tooltipFormatter,\r\n    nonRealtimeData: false,\r\n    responsive: false,\r\n    limitFPS: 0\r\n  };\r\n\r\n  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\r\n  SmoothieChart.AnimateCompatibility = (function() {\r\n    var requestAnimationFrame = function(callback, element) {\r\n          var requestAnimationFrame =\r\n            window.requestAnimationFrame        ||\r\n            window.webkitRequestAnimationFrame  ||\r\n            window.mozRequestAnimationFrame     ||\r\n            window.oRequestAnimationFrame       ||\r\n            window.msRequestAnimationFrame      ||\r\n            function(callback) {\r\n              return window.setTimeout(function() {\r\n                callback(Date.now());\r\n              }, 16);\r\n            };\r\n          return requestAnimationFrame.call(window, callback, element);\r\n        },\r\n        cancelAnimationFrame = function(id) {\r\n          var cancelAnimationFrame =\r\n            window.cancelAnimationFrame ||\r\n            function(id) {\r\n              clearTimeout(id);\r\n            };\r\n          return cancelAnimationFrame.call(window, id);\r\n        };\r\n\r\n    return {\r\n      requestAnimationFrame: requestAnimationFrame,\r\n      cancelAnimationFrame: cancelAnimationFrame\r\n    };\r\n  })();\r\n\r\n  SmoothieChart.defaultSeriesPresentationOptions = {\r\n    lineWidth: 1,\r\n    strokeStyle: '#ffffff'\r\n  };\r\n\r\n  /**\r\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\r\n   *\r\n   * Presentation options should be of the form (defaults shown):\r\n   *\r\n   * <pre>\r\n   * {\r\n   *   lineWidth: 1,\r\n   *   strokeStyle: '#ffffff',\r\n   *   fillStyle: undefined,\r\n   *   interpolation: undefined;\r\n   *   tooltipLabel: undefined\r\n   * }\r\n   * </pre>\r\n   */\r\n  SmoothieChart.prototype.addTimeSeries = function(timeSeries, options) {\r\n    this.seriesSet.push({timeSeries: timeSeries, options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)});\r\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\r\n      timeSeries.resetBoundsTimerId = setInterval(\r\n        function() {\r\n          timeSeries.resetBounds();\r\n        },\r\n        timeSeries.options.resetBoundsInterval\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes the specified <code>TimeSeries</code> from the chart.\r\n   */\r\n  SmoothieChart.prototype.removeTimeSeries = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        this.seriesSet.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    // If a timer was operating for that timeseries, remove it\r\n    if (timeSeries.resetBoundsTimerId) {\r\n      // Stop resetting the bounds, if we were\r\n      clearInterval(timeSeries.resetBoundsTimerId);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets render options for the specified <code>TimeSeries</code>.\r\n   *\r\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\r\n   * these settings are stored in the chart.\r\n   */\r\n  SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        return this.seriesSet[i].options;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\r\n   */\r\n  SmoothieChart.prototype.bringToFront = function(timeSeries) {\r\n    // Find the correct timeseries to remove, and remove it\r\n    var numSeries = this.seriesSet.length;\r\n    for (var i = 0; i < numSeries; i++) {\r\n      if (this.seriesSet[i].timeSeries === timeSeries) {\r\n        var set = this.seriesSet.splice(i, 1);\r\n        this.seriesSet.push(set[0]);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\r\n   *\r\n   * @param canvas the target canvas element\r\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\r\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\r\n   */\r\n  SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {\r\n    this.canvas = canvas;\r\n\r\n    this.clientWidth = parseInt(this.canvas.getAttribute('width'));\r\n    this.clientHeight = parseInt(this.canvas.getAttribute('height'));\r\n\r\n    this.delay = delayMillis;\r\n    this.start();\r\n  };\r\n\r\n  SmoothieChart.prototype.getTooltipEl = function () {\r\n    // Create the tool tip element lazily\r\n    if (!this.tooltipEl) {\r\n      this.tooltipEl = document.createElement('div');\r\n      this.tooltipEl.className = 'smoothie-chart-tooltip';\r\n      this.tooltipEl.style.pointerEvents = 'none';\r\n      this.tooltipEl.style.position = 'absolute';\r\n      this.tooltipEl.style.display = 'none';\r\n      document.body.appendChild(this.tooltipEl);\r\n    }\r\n    return this.tooltipEl;\r\n  };\r\n\r\n  SmoothieChart.prototype.updateTooltip = function () {\r\n    if(!this.options.tooltip){\r\n     return; \r\n    }\r\n    var el = this.getTooltipEl();\r\n\r\n    if (!this.mouseover || !this.options.tooltip) {\r\n      el.style.display = 'none';\r\n      return;\r\n    }\r\n\r\n    var time = this.lastChartTimestamp;\r\n\r\n    // x pixel to time\r\n    var t = this.options.scrollBackwards\r\n      ? time - this.mouseX * this.options.millisPerPixel\r\n      : time - (this.clientWidth - this.mouseX) * this.options.millisPerPixel;\r\n\r\n    var data = [];\r\n\r\n     // For each data set...\r\n    for (var d = 0; d < this.seriesSet.length; d++) {\r\n      var timeSeries = this.seriesSet[d].timeSeries;\r\n      if (timeSeries.disabled) {\r\n          continue;\r\n      }\r\n\r\n      // find datapoint closest to time 't'\r\n      var closeIdx = Util.binarySearch(timeSeries.data, t);\r\n      if (closeIdx > 0 && closeIdx < timeSeries.data.length) {\r\n        data.push({ series: this.seriesSet[d], index: closeIdx, value: timeSeries.data[closeIdx][1] });\r\n      }\r\n    }\r\n\r\n    if (data.length) {\r\n      // TODO make `tooltipFormatter` return element(s) instead of an HTML string so it's harder for users\r\n      // to introduce an XSS. This would be a breaking change.\r\n      el.innerHTML = this.options.tooltipFormatter.call(this, t, data);\r\n      el.style.display = 'block';\r\n    } else {\r\n      el.style.display = 'none';\r\n    }\r\n  };\r\n\r\n  SmoothieChart.prototype.mousemove = function (evt) {\r\n    this.mouseover = true;\r\n    this.mouseX = evt.offsetX;\r\n    this.mouseY = evt.offsetY;\r\n    this.mousePageX = evt.pageX;\r\n    this.mousePageY = evt.pageY;\r\n    if(!this.options.tooltip){\r\n     return; \r\n    }\r\n    var el = this.getTooltipEl();\r\n    el.style.top = Math.round(this.mousePageY) + 'px';\r\n    el.style.left = Math.round(this.mousePageX) + 'px';\r\n    this.updateTooltip();\r\n  };\r\n\r\n  SmoothieChart.prototype.mouseout = function () {\r\n    this.mouseover = false;\r\n    this.mouseX = this.mouseY = -1;\r\n    if (this.tooltipEl)\r\n      this.tooltipEl.style.display = 'none';\r\n  };\r\n\r\n  /**\r\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\r\n   */\r\n  SmoothieChart.prototype.resize = function () {\r\n    var dpr = !this.options.enableDpiScaling || !window ? 1 : window.devicePixelRatio,\r\n        width, height;\r\n    if (this.options.responsive) {\r\n      // Newer behaviour: Use the canvas's size in the layout, and set the internal\r\n      // resolution according to that size and the device pixel ratio (eg: high DPI)\r\n      width = this.canvas.offsetWidth;\r\n      height = this.canvas.offsetHeight;\r\n\r\n      if (width !== this.lastWidth) {\r\n        this.lastWidth = width;\r\n        this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\r\n        this.canvas.getContext('2d').scale(dpr, dpr);\r\n      }\r\n      if (height !== this.lastHeight) {\r\n        this.lastHeight = height;\r\n        this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\r\n        this.canvas.getContext('2d').scale(dpr, dpr);\r\n      }\r\n\r\n      this.clientWidth = width;\r\n      this.clientHeight = height;\r\n    } else {\r\n      width = parseInt(this.canvas.getAttribute('width'));\r\n      height = parseInt(this.canvas.getAttribute('height'));\r\n\r\n      if (dpr !== 1) {\r\n        // Older behaviour: use the canvas's inner dimensions and scale the element's size\r\n        // according to that size and the device pixel ratio (eg: high DPI)\r\n\r\n        if (Math.floor(this.clientWidth * dpr) !== width) {\r\n          this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\r\n          this.canvas.style.width = width + 'px';\r\n          this.clientWidth = width;\r\n          this.canvas.getContext('2d').scale(dpr, dpr);\r\n        }\r\n\r\n        if (Math.floor(this.clientHeight * dpr) !== height) {\r\n          this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\r\n          this.canvas.style.height = height + 'px';\r\n          this.clientHeight = height;\r\n          this.canvas.getContext('2d').scale(dpr, dpr);\r\n        }\r\n      } else {\r\n        this.clientWidth = width;\r\n        this.clientHeight = height;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Starts the animation of this chart.\r\n   */\r\n  SmoothieChart.prototype.start = function() {\r\n    if (this.frame) {\r\n      // We're already running, so just return\r\n      return;\r\n    }\r\n\r\n    this.canvas.addEventListener('mousemove', this.mousemove);\r\n    this.canvas.addEventListener('mouseout', this.mouseout);\r\n\r\n    // Renders a frame, and queues the next frame for later rendering\r\n    var animate = function() {\r\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function() {\r\n        if(this.options.nonRealtimeData){\r\n           var dateZero = new Date(0);\r\n           // find the data point with the latest timestamp\r\n           var maxTimeStamp = this.seriesSet.reduce(function(max, series){\r\n             var dataSet = series.timeSeries.data;\r\n             var indexToCheck = Math.round(this.options.displayDataFromPercentile * dataSet.length) - 1;\r\n             indexToCheck = indexToCheck >= 0 ? indexToCheck : 0;\r\n             indexToCheck = indexToCheck <= dataSet.length -1 ? indexToCheck : dataSet.length -1;\r\n             if(dataSet && dataSet.length > 0)\r\n             {\r\n              // timestamp corresponds to element 0 of the data point\r\n              var lastDataTimeStamp = dataSet[indexToCheck][0];\r\n              max = max > lastDataTimeStamp ? max : lastDataTimeStamp;\r\n             }\r\n             return max;\r\n          }.bind(this), dateZero);\r\n          // use the max timestamp as current time\r\n          this.render(this.canvas, maxTimeStamp > dateZero ? maxTimeStamp : null);\r\n        } else {\r\n          this.render();\r\n        }\r\n        animate();\r\n      }.bind(this));\r\n    }.bind(this);\r\n\r\n    animate();\r\n  };\r\n\r\n  /**\r\n   * Stops the animation of this chart.\r\n   */\r\n  SmoothieChart.prototype.stop = function() {\r\n    if (this.frame) {\r\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\r\n      delete this.frame;\r\n      this.canvas.removeEventListener('mousemove', this.mousemove);\r\n      this.canvas.removeEventListener('mouseout', this.mouseout);\r\n    }\r\n  };\r\n\r\n  SmoothieChart.prototype.updateValueRange = function() {\r\n    // Calculate the current scale of the chart, from all time series.\r\n    var chartOptions = this.options,\r\n        chartMaxValue = Number.NaN,\r\n        chartMinValue = Number.NaN;\r\n\r\n    for (var d = 0; d < this.seriesSet.length; d++) {\r\n      // TODO(ndunn): We could calculate / track these values as they stream in.\r\n      var timeSeries = this.seriesSet[d].timeSeries;\r\n      if (timeSeries.disabled) {\r\n          continue;\r\n      }\r\n\r\n      if (!isNaN(timeSeries.maxValue)) {\r\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\r\n      }\r\n\r\n      if (!isNaN(timeSeries.minValue)) {\r\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\r\n      }\r\n    }\r\n\r\n    // Scale the chartMaxValue to add padding at the top if required\r\n    if (chartOptions.maxValue != null) {\r\n      chartMaxValue = chartOptions.maxValue;\r\n    } else {\r\n      chartMaxValue *= chartOptions.maxValueScale;\r\n    }\r\n\r\n    // Set the minimum if we've specified one\r\n    if (chartOptions.minValue != null) {\r\n      chartMinValue = chartOptions.minValue;\r\n    } else {\r\n      chartMinValue -= Math.abs(chartMinValue * chartOptions.minValueScale - chartMinValue);\r\n    }\r\n\r\n    // If a custom range function is set, call it\r\n    if (this.options.yRangeFunction) {\r\n      var range = this.options.yRangeFunction({min: chartMinValue, max: chartMaxValue});\r\n      chartMinValue = range.min;\r\n      chartMaxValue = range.max;\r\n    }\r\n\r\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\r\n      var targetValueRange = chartMaxValue - chartMinValue;\r\n      var valueRangeDiff = (targetValueRange - this.currentValueRange);\r\n      var minValueDiff = (chartMinValue - this.currentVisMinValue);\r\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\r\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\r\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\r\n    }\r\n\r\n    this.valueRange = { min: chartMinValue, max: chartMaxValue };\r\n  };\r\n\r\n  SmoothieChart.prototype.render = function(canvas, time) {\r\n    var nowMillis = Date.now();\r\n\r\n    // Respect any frame rate limit.\r\n    if (this.options.limitFPS > 0 && nowMillis - this.lastRenderTimeMillis < (1000/this.options.limitFPS))\r\n      return;\r\n\r\n    time = (time || nowMillis) - (this.delay || 0);\r\n\r\n    // Round time down to pixel granularity, so motion appears smoother.\r\n    time -= time % this.options.millisPerPixel;\r\n\r\n    if (!this.isAnimatingScale) {\r\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\r\n      // we actually need to paint anything yet. If not, we can return immediately.\r\n      var sameTime = this.lastChartTimestamp === time;\r\n      if (sameTime) {\r\n        // Render at least every 1/6th of a second. The canvas may be resized, which there is\r\n        // no reliable way to detect.\r\n        var needToRenderInCaseCanvasResized = nowMillis - this.lastRenderTimeMillis > 1000/6;\r\n        if (!needToRenderInCaseCanvasResized) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.lastRenderTimeMillis = nowMillis;\r\n    this.lastChartTimestamp = time;\r\n\r\n    this.resize();\r\n\r\n    canvas = canvas || this.canvas;\r\n    var context = canvas.getContext('2d'),\r\n        chartOptions = this.options,\r\n        // Using `this.clientWidth` instead of `canvas.clientWidth` because the latter is slow.\r\n        dimensions = { top: 0, left: 0, width: this.clientWidth, height: this.clientHeight },\r\n        // Calculate the threshold time for the oldest data points.\r\n        oldestValidTime = time - (dimensions.width * chartOptions.millisPerPixel),\r\n        valueToYPosition = function(value, lineWidth) {\r\n          var offset = value - this.currentVisMinValue,\r\n              unsnapped = this.currentValueRange === 0\r\n                ? dimensions.height\r\n                : dimensions.height * (1 - offset / this.currentValueRange);\r\n          return Util.pixelSnap(unsnapped, lineWidth);\r\n        }.bind(this),\r\n        timeToXPosition = function(t, lineWidth) {\r\n          var unsnapped = chartOptions.scrollBackwards\r\n            ? (time - t) / chartOptions.millisPerPixel\r\n            : dimensions.width - ((time - t) / chartOptions.millisPerPixel);\r\n          return Util.pixelSnap(unsnapped, lineWidth);\r\n        };\r\n\r\n    this.updateValueRange();\r\n\r\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;\r\n\r\n    // Save the state of the canvas context, any transformations applied in this method\r\n    // will get removed from the stack at the end of this method when .restore() is called.\r\n    context.save();\r\n\r\n    // Move the origin.\r\n    context.translate(dimensions.left, dimensions.top);\r\n\r\n    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\r\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\r\n    // screen cheese (that phrase should need no explanation).\r\n    context.beginPath();\r\n    context.rect(0, 0, dimensions.width, dimensions.height);\r\n    context.clip();\r\n\r\n    // Clear the working area.\r\n    context.save();\r\n    context.fillStyle = chartOptions.grid.fillStyle;\r\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\r\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\r\n    context.restore();\r\n\r\n    // Grid lines...\r\n    context.save();\r\n    context.lineWidth = chartOptions.grid.lineWidth;\r\n    context.strokeStyle = chartOptions.grid.strokeStyle;\r\n    // Vertical (time) dividers.\r\n    if (chartOptions.grid.millisPerLine > 0) {\r\n      context.beginPath();\r\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\r\n           t >= oldestValidTime;\r\n           t -= chartOptions.grid.millisPerLine) {\r\n        var gx = timeToXPosition(t, chartOptions.grid.lineWidth);\r\n        context.moveTo(gx, 0);\r\n        context.lineTo(gx, dimensions.height);\r\n      }\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n\r\n    // Horizontal (value) dividers.\r\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\r\n      var gy = Util.pixelSnap(v * dimensions.height / chartOptions.grid.verticalSections, chartOptions.grid.lineWidth);\r\n      context.beginPath();\r\n      context.moveTo(0, gy);\r\n      context.lineTo(dimensions.width, gy);\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n    // Bounding rectangle.\r\n    if (chartOptions.grid.borderVisible) {\r\n      context.beginPath();\r\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\r\n      context.closePath();\r\n    }\r\n    context.restore();\r\n\r\n    // Draw any horizontal lines...\r\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\r\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\r\n        var line = chartOptions.horizontalLines[hl],\r\n            lineWidth = line.lineWidth || 1,\r\n            hly = valueToYPosition(line.value, lineWidth);\r\n        context.strokeStyle = line.color || '#ffffff';\r\n        context.lineWidth = lineWidth;\r\n        context.beginPath();\r\n        context.moveTo(0, hly);\r\n        context.lineTo(dimensions.width, hly);\r\n        context.stroke();\r\n        context.closePath();\r\n      }\r\n    }\r\n\r\n    // For each data set...\r\n    for (var d = 0; d < this.seriesSet.length; d++) {\r\n      var timeSeries = this.seriesSet[d].timeSeries,\r\n          dataSet = timeSeries.data;\r\n\r\n      // Delete old data that's moved off the left of the chart.\r\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);\r\n      if (dataSet.length <= 1 || timeSeries.disabled) {\r\n          continue;\r\n      }\r\n      context.save();\r\n\r\n      var seriesOptions = this.seriesSet[d].options,\r\n          // Keep in mind that `context.lineWidth = 0` doesn't actually set it to `0`.\r\n          drawStroke = seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none',\r\n          lineWidthMaybeZero = drawStroke ? seriesOptions.lineWidth : 0;\r\n\r\n      // Draw the line...\r\n      context.beginPath();\r\n      // Retain lastX, lastY for calculating the control points of bezier curves.\r\n      var firstX = timeToXPosition(dataSet[0][0], lineWidthMaybeZero),\r\n        firstY = valueToYPosition(dataSet[0][1], lineWidthMaybeZero),\r\n        lastX = firstX,\r\n        lastY = firstY,\r\n        draw;\r\n      context.moveTo(firstX, firstY);\r\n      switch (seriesOptions.interpolation || chartOptions.interpolation) {\r\n        case \"linear\":\r\n        case \"line\": {\r\n          draw = function(x, y, lastX, lastY) {\r\n            context.lineTo(x,y);\r\n          }\r\n          break;\r\n        }\r\n        case \"bezier\":\r\n        default: {\r\n          // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\r\n          //\r\n          // Assuming A was the last point in the line plotted and B is the new point,\r\n          // we draw a curve with control points P and Q as below.\r\n          //\r\n          // A---P\r\n          //     |\r\n          //     |\r\n          //     |\r\n          //     Q---B\r\n          //\r\n          // Importantly, A and P are at the same y coordinate, as are B and Q. This is\r\n          // so adjacent curves appear to flow as one.\r\n          //\r\n          draw = function(x, y, lastX, lastY) {\r\n            context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop\r\n              Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)\r\n              Math.round((lastX + x)) / 2, y, // controlPoint2 (Q)\r\n              x, y); // endPoint (B)\r\n          }\r\n          break;\r\n        }\r\n        case \"step\": {\r\n          draw = function(x, y, lastX, lastY) {\r\n            context.lineTo(x,lastY);\r\n            context.lineTo(x,y);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (var i = 1; i < dataSet.length; i++) {\r\n        var iThData = dataSet[i],\r\n            x = timeToXPosition(iThData[0], lineWidthMaybeZero),\r\n            y = valueToYPosition(iThData[1], lineWidthMaybeZero);\r\n        draw(x, y, lastX, lastY);\r\n        lastX = x; lastY = y;\r\n      }\r\n\r\n      if (drawStroke) {\r\n        context.lineWidth = seriesOptions.lineWidth;\r\n        context.strokeStyle = seriesOptions.strokeStyle;\r\n        context.stroke();\r\n      }\r\n\r\n      if (seriesOptions.fillStyle) {\r\n        // Close up the fill region.\r\n        context.lineTo(lastX, dimensions.height + lineWidthMaybeZero + 1);\r\n        context.lineTo(firstX, dimensions.height + lineWidthMaybeZero + 1);\r\n\r\n        context.fillStyle = seriesOptions.fillStyle;\r\n        context.fill();\r\n      }\r\n\r\n      context.restore();\r\n    }\r\n\r\n    if (chartOptions.tooltip && this.mouseX >= 0) {\r\n      // Draw vertical bar to show tooltip position\r\n      context.lineWidth = chartOptions.tooltipLine.lineWidth;\r\n      context.strokeStyle = chartOptions.tooltipLine.strokeStyle;\r\n      context.beginPath();\r\n      context.moveTo(this.mouseX, 0);\r\n      context.lineTo(this.mouseX, dimensions.height);\r\n      context.closePath();\r\n      context.stroke();\r\n    }\r\n    this.updateTooltip();\r\n\r\n    var labelsOptions = chartOptions.labels;\r\n    // Draw the axis values on the chart.\r\n    if (!labelsOptions.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\r\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, labelsOptions.precision),\r\n          minValueString = chartOptions.yMinFormatter(this.valueRange.min, labelsOptions.precision),\r\n          maxLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(maxValueString).width - 2,\r\n          minLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(minValueString).width - 2;\r\n      context.fillStyle = labelsOptions.fillStyle;\r\n      context.fillText(maxValueString, maxLabelPos, labelsOptions.fontSize);\r\n      context.fillText(minValueString, minLabelPos, dimensions.height - 2);\r\n    }\r\n\r\n    // Display intermediate y axis labels along y-axis to the left of the chart\r\n    if ( labelsOptions.showIntermediateLabels\r\n          && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)\r\n          && chartOptions.grid.verticalSections > 0) {\r\n      // show a label above every vertical section divider\r\n      var step = (this.valueRange.max - this.valueRange.min) / chartOptions.grid.verticalSections;\r\n      var stepPixels = dimensions.height / chartOptions.grid.verticalSections;\r\n      for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\r\n        var gy = dimensions.height - Math.round(v * stepPixels),\r\n            yValue = chartOptions.yIntermediateFormatter(this.valueRange.min + (v * step), labelsOptions.precision),\r\n            //left of right axis?\r\n            intermediateLabelPos =\r\n              labelsOptions.intermediateLabelSameAxis\r\n              ? (chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(yValue).width - 2)\r\n              : (chartOptions.scrollBackwards ? dimensions.width - context.measureText(yValue).width - 2 : 0);\r\n\r\n        context.fillText(yValue, intermediateLabelPos, gy - chartOptions.grid.lineWidth);\r\n      }\r\n    }\r\n\r\n    // Display timestamps along x-axis at the bottom of the chart.\r\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\r\n      var textUntilX = chartOptions.scrollBackwards\r\n        ? context.measureText(minValueString).width\r\n        : dimensions.width - context.measureText(minValueString).width + 4;\r\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\r\n           t >= oldestValidTime;\r\n           t -= chartOptions.grid.millisPerLine) {\r\n        var gx = timeToXPosition(t, 0);\r\n        // Only draw the timestamp if it won't overlap with the previously drawn one.\r\n        if ((!chartOptions.scrollBackwards && gx < textUntilX) || (chartOptions.scrollBackwards && gx > textUntilX))  {\r\n          // Formats the timestamp based on user specified formatting function\r\n          // SmoothieChart.timeFormatter function above is one such formatting option\r\n          var tx = new Date(t),\r\n            ts = chartOptions.timestampFormatter(tx),\r\n            tsWidth = context.measureText(ts).width;\r\n\r\n          textUntilX = chartOptions.scrollBackwards\r\n            ? gx + tsWidth + 2\r\n            : gx - tsWidth - 2;\r\n\r\n          context.fillStyle = chartOptions.labels.fillStyle;\r\n          if(chartOptions.scrollBackwards) {\r\n            context.fillText(ts, gx, dimensions.height - 2);\r\n          } else {\r\n            context.fillText(ts, gx - tsWidth, dimensions.height - 2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Display title.\r\n    if (chartOptions.title.text !== '') {\r\n      context.font = chartOptions.title.fontSize + 'px ' + chartOptions.title.fontFamily;\r\n      var titleXPos = chartOptions.scrollBackwards ? dimensions.width - context.measureText(chartOptions.title.text).width - 2 : 2;\r\n      if (chartOptions.title.verticalAlign == 'bottom') {\r\n        context.textBaseline = 'bottom';\r\n        var titleYPos = dimensions.height;\r\n      } else if (chartOptions.title.verticalAlign == 'middle') {\r\n        context.textBaseline = 'middle';\r\n        var titleYPos = dimensions.height / 2;\r\n      } else {\r\n        context.textBaseline = 'top';\r\n        var titleYPos = 0;\r\n      }\r\n      context.fillStyle = chartOptions.title.fillStyle;\r\n      context.fillText(chartOptions.title.text, titleXPos, titleYPos);\r\n    }\r\n\r\n    context.restore(); // See .save() above.\r\n  };\r\n\r\n  // Sample timestamp formatting function\r\n  SmoothieChart.timeFormatter = function(date) {\r\n    function pad2(number) { return (number < 10 ? '0' : '') + number }\r\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n  };\r\n\r\n  exports.TimeSeries = TimeSeries;\r\n  exports.SmoothieChart = SmoothieChart;\r\n\r\n})(typeof exports === 'undefined' ? this : exports);\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}